{
    "docs": [
        {
            "location": "/index.html",
            "text": "Overview\n\n\nThis is the documentation for API Framework which provides effective way of creating API using JSON Configurations.\n\n\n\n\nNote\n\n\nThe Microservices Framework is still under development and new features are getting added on a daily basis. Please refer the \nrelease note\n section for updated information.  \n\n\n\n\nTypical API Development Process\n\n\n\n\n\n\nTypically there are 4 major steps in any type of API Development (Assuming TitanDB/Solr used for Search and HBase to retrieve the data)\n\n\n\n\nInput Validation\n\n\nTitan/Solr query\n\n\nHBase Data Load\n\n\nJSON/XML Response Generator\n\n\n\n\n\n\n\n\nThe API Framework provides ability to use reusable components driven by configurations.\n\n\n\n\n\n\n\n\nCurrently Supported Components\n\n\n\n\nThe following components are currently supported and can be created using JSON Configurations.\n\n\n\n\n\n\nEnd to End API Automation Workflow using the Framework\n\n\n\n\nThe Framework not only allows us to use the components using configurations, but also provides an opportunity to even automate the creation of the configurations from the mapping doc itself.\n\n\nThere will be functionality added in the current metadata ui application to allow users to upload a mapping doc and generate the related configurations from the mapping doc.\n\n\nUser will be able to create the configuration using guided wigets.\n\n\n\n\n\n\nThe Metadata UI will also provide functionality to validate the titan query (Real-time).\n\n\nVersioning will also be enabled.     \n\n\nOnce the configuration has been created, it will be stored in HBase and can be used by the Framework to provide the required functionality.\n\n\n\n\n\n\nAdvantages\n\n\n\n\nThis will greatly reduce the development effort and increase efficiency by re-using the common components.\n\n\nAnyone without extensive system knowledge will be able to modify/create new APIs.\n\n\nSupports scenario based iterative development.\n\n\nEasy to change/update exiting logic without even opening code.\n\n\nMore advanced features and supports for additional database / service / format can be added easily.",
            "title": "Home"
        },
        {
            "location": "/index.html#overview",
            "text": "This is the documentation for API Framework which provides effective way of creating API using JSON Configurations.   Note  The Microservices Framework is still under development and new features are getting added on a daily basis. Please refer the  release note  section for updated information.",
            "title": "Overview"
        },
        {
            "location": "/index.html#typical-api-development-process",
            "text": "Typically there are 4 major steps in any type of API Development (Assuming TitanDB/Solr used for Search and HBase to retrieve the data)   Input Validation  Titan/Solr query  HBase Data Load  JSON/XML Response Generator     The API Framework provides ability to use reusable components driven by configurations.",
            "title": "Typical API Development Process"
        },
        {
            "location": "/index.html#currently-supported-components",
            "text": "The following components are currently supported and can be created using JSON Configurations.",
            "title": "Currently Supported Components"
        },
        {
            "location": "/index.html#end-to-end-api-automation-workflow-using-the-framework",
            "text": "The Framework not only allows us to use the components using configurations, but also provides an opportunity to even automate the creation of the configurations from the mapping doc itself.  There will be functionality added in the current metadata ui application to allow users to upload a mapping doc and generate the related configurations from the mapping doc.  User will be able to create the configuration using guided wigets.    The Metadata UI will also provide functionality to validate the titan query (Real-time).  Versioning will also be enabled.       Once the configuration has been created, it will be stored in HBase and can be used by the Framework to provide the required functionality.",
            "title": "End to End API Automation Workflow using the Framework"
        },
        {
            "location": "/index.html#advantages",
            "text": "This will greatly reduce the development effort and increase efficiency by re-using the common components.  Anyone without extensive system knowledge will be able to modify/create new APIs.  Supports scenario based iterative development.  Easy to change/update exiting logic without even opening code.  More advanced features and supports for additional database / service / format can be added easily.",
            "title": "Advantages"
        },
        {
            "location": "/setup_instruction/workspace/index.html",
            "text": "Workspace Setup Guide",
            "title": "Workspace"
        },
        {
            "location": "/setup_instruction/workspace/index.html#workspace-setup-guide",
            "text": "",
            "title": "Workspace Setup Guide"
        },
        {
            "location": "/setup_instruction/api/index.html",
            "text": "API Setup Guide\n\n\n\n\nAbstract\n\n\nThis will demonstrate the high level setup instructions. \n\n\n\n\nSteps\n\n\n\n\nCreate New Configuration in Metadata UI\n\n\n\n\nCreate a configuration in the \nMetadata UI\n -> \nhttp://10.215.12.91:3030/#\n (port number may vary)\n\n\nRun the \nMetadata UI\n -> Click on the \nManage JSON mapping\n tab\n\n\nSelect the environment where you want to create the configuration.\n    \n\n\nClick on Refresh \n to load the current configuration list.\n    \n\n\n\n\nClick on the \n+\n to create new configurations\n\n\n\n\nEnter the name of the configuration. This will also be the rowkey in HBase, hence this needs to be unique.\n\n\nClick on \nOK\n to create config.\n\n\n\n\n\n\n\n\nA new configuration will be added with empty JSON.\n\n\n\n\n\n\n\n\nAdditional additional fields such as API Name, URI etc.\n\n\n\n\n\n\n\n\nClick on the save icon \n to save the configuration to HBase.\n\n\n\n\n\n\n\n\nAdd JSON Configuration\n\n\n\n\nDanger\n\n\nCurrently different version of the configuration is only maintained at HBase end, hence refresh to reload the configuration before saving your changes in order to avoid overwrite issues.  \n\n\n\n\n\n\nAt this point you have an empty configuration created.\n\n\nPlease add the required JSON in the JSON Editor and click on Save again.\n\n\n\n\nIn the Configuration we have four sections \n\n\n\n\nrequestparam_Validation\n - Input Validation\n\n\nTitan\n - Titan Query\n\n\ntables\n - HBase Table Configuration\n\n\nresponse\n - Create JSON response\n\n\n\n\n\n\n\n\nHere is a sample JSON ( Detailed explanation has been provided later ).\n\n\n\n\n\n\n  1\n  2\n  3\n  4\n  5\n  6\n  7\n  8\n  9\n 10\n 11\n 12\n 13\n 14\n 15\n 16\n 17\n 18\n 19\n 20\n 21\n 22\n 23\n 24\n 25\n 26\n 27\n 28\n 29\n 30\n 31\n 32\n 33\n 34\n 35\n 36\n 37\n 38\n 39\n 40\n 41\n 42\n 43\n 44\n 45\n 46\n 47\n 48\n 49\n 50\n 51\n 52\n 53\n 54\n 55\n 56\n 57\n 58\n 59\n 60\n 61\n 62\n 63\n 64\n 65\n 66\n 67\n 68\n 69\n 70\n 71\n 72\n 73\n 74\n 75\n 76\n 77\n 78\n 79\n 80\n 81\n 82\n 83\n 84\n 85\n 86\n 87\n 88\n 89\n 90\n 91\n 92\n 93\n 94\n 95\n 96\n 97\n 98\n 99\n100\n101\n102\n103\n{\n\n  \n\"requestparam_Validation\"\n:\n \n{\n\n    \n\"default\"\n:\n \n{\n\n      \n\"parameters\"\n:\n \n[\n\n        \n{\n\n          \n\"name\"\n:\n \n\"claimNumber\"\n,\n\n          \n\"operator\"\n:\n \n\"==\"\n,\n\n          \n\"required\"\n:\n \n\"Yes\"\n\n        \n}\n\n      \n],\n\n      \n\"control\"\n:\n \n[\n\n        \n{\n\n          \n\"limit\"\n:\n \n\"20\"\n,\n\n          \n\"offset\"\n:\n \n\"0\"\n,\n\n          \n\"sort\"\n:\n \n\"\"\n\n        \n}\n\n      \n]\n\n    \n}\n\n  \n},\n\n  \n\"Titan\"\n:\n \n{\n\n    \n\"request\"\n:\n \n{\n\n      \n\"default\"\n:\n \n[\n\n        \n{\n\n          \n\"query\"\n:\n \n{\n\n            \n\"queryName\"\n:\n \n\"claimPayment\"\n,\n\n            \n\"claimPayment\"\n:\n \n[\n\n              \n{\n\n                \n\"ops\"\n:\n \n\"has\"\n,\n\n                \n\"attr\"\n:\n \n\"Claim_Number\"\n,\n\n                \n\"value\"\n:\n \n\"#claimNumber#\"\n\n              \n},\n\n              \n{\n\n                \n\"ops\"\n:\n \n\"hasLabel\"\n,\n\n                \n\"value\"\n:\n \n\"Claim\"\n\n              \n},\n\n              \n{\n\n                \n\"ops\"\n:\n \n\"out\"\n,\n\n                \n\"attr\"\n:\n \n\"has_a_Payment\"\n\n              \n},\n\n              \n{\n\n                \n\"ops\"\n:\n \n\"valueMap\"\n,\n\n                \n\"attr\"\n:\n \n\"vid\"\n\n              \n}\n\n            \n]\n\n          \n},\n\n          \n\"response\"\n:\n \n{}\n\n        \n}\n\n      \n]\n\n    \n}\n\n  \n},\n\n  \n\"tables\"\n:\n \n{\n\n    \n\"T_CLM_PY\"\n:\n \n{\n\n      \n\"queryName\"\n:\n \n\"claimPayment\"\n,\n\n      \n\"columns\"\n:\n \n[\n\n        \n\"b.N_PY_PERIODS\"\n\n      \n]\n\n    \n}\n\n  \n},\n\n  \n\"response\"\n:\n \n[\n\n    \n{\n\n      \n\"type\"\n:\n \n\"array\"\n,\n\n      \n\"field\"\n:\n \n\"items\"\n,\n\n      \n\"tableName\"\n:\n \n\"CLAIM_PAYMENT\"\n,\n\n      \n\"columnName\"\n:\n \n\"DAYS_NOT_PAID\"\n,\n\n      \n\"injectTableName\"\n:\n \n\"PAYMENTS\"\n,\n\n      \n\"children\"\n:\n \n[\n\n        \n{\n\n          \n\"type\"\n:\n \n\"custom\"\n,\n\n          \n\"field\"\n:\n \n\"self\"\n,\n\n          \n\"methodName\"\n:\n \n\"getDaysNotPaid_Self\"\n\n        \n},\n\n        \n{\n\n          \n\"type\"\n:\n \n\"generic\"\n,\n\n          \n\"field\"\n:\n \n\"number\"\n,\n\n          \n\"tableName\"\n:\n \n\"PAYMENTS\"\n,\n\n          \n\"columnName\"\n:\n \n\"NUMBER\"\n,\n\n          \n\"dtype\"\n:\n \n\"string\"\n\n        \n},\n\n        \n{\n\n          \n\"field\"\n:\n \n\"excludeReasonCode\"\n,\n\n          \n\"tableName\"\n:\n \n\"PAYMENTS\"\n,\n\n          \n\"columnName\"\n:\n \n\"N_PYBL_DAY_CD\"\n,\n\n          \n\"type\"\n:\n \n\"generic\"\n,\n\n          \n\"dtype\"\n:\n \n\"string\"\n\n        \n},\n\n        \n{\n\n          \n\"field\"\n:\n \n\"excludeStartDate\"\n,\n\n          \n\"tableName\"\n:\n \n\"PAYMENTS\"\n,\n\n          \n\"columnName\"\n:\n \n\"STRT_DT\"\n,\n\n          \n\"type\"\n:\n \n\"generic\"\n,\n\n          \n\"dtype\"\n:\n \n\"string\"\n\n        \n},\n\n        \n{\n\n          \n\"field\"\n:\n \n\"excludeEndDate\"\n,\n\n          \n\"tableName\"\n:\n \n\"PAYMENTS\"\n,\n\n          \n\"columnName\"\n:\n \n\"END_DT\"\n,\n\n          \n\"type\"\n:\n \n\"generic\"\n,\n\n          \n\"dtype\"\n:\n \n\"string\"\n\n        \n}\n\n      \n]\n\n    \n}\n\n  \n]\n\n\n}\n\n\n\n\n\n\n\nUpdate \n<appname>.yml\n file\n\n\n\n\nNext we need to add the rowkey to the \n<appname>.yml\n file so that the JSON Configuration can be loaded during server startup.\n\n\nIn the following example, total 4 rowkeys were added. \n\n\nMultiple rowkey can be added using comma (,) separator.\n\n\n\n\n1\nnewmapping\n:\n \npaymentAdjustment,overpayments,daysNotPaid,retrieveAbsenceByID\n\n\n\n\n\n\n\n\n\nInfo\n\n\n\n\nAbove \nclaimservice.yml\n was updated inside the eos-config-services project.\n\n\n\n\n\n\nLoad Config in Code\n\n\n\n\nTo access the loaded configuration in Java code, use the following code \n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\nclass\n \n<\nBusinessLayer\n>\n\n    \n@Autowired\n\n    \nEntityMetadataConfig\n \nmetadataConfig\n;\n\n\n    \npublic\n \nResponseEntity\n<\nString\n>\n \nget\n<\nFunction\n>(\nMap\n<\nString\n,\n \nString\n>\n \nrequestParams\n){\n\n\n        \nMap\n \njsonConfig\n=\nmetadataConfig\n.\ngetMappingMetaData\n().\nget\n(\n\"add rowkey here\"\n);\n\n\n        \n...\n\n\n     \n}\n\n\n\n\n\n* Now the above \njsonConfig\n can be used in different components of the code.",
            "title": "API"
        },
        {
            "location": "/setup_instruction/api/index.html#api-setup-guide",
            "text": "Abstract  This will demonstrate the high level setup instructions.",
            "title": "API Setup Guide"
        },
        {
            "location": "/setup_instruction/api/index.html#steps",
            "text": "",
            "title": "Steps"
        },
        {
            "location": "/setup_instruction/api/index.html#create-new-configuration-in-metadata-ui",
            "text": "Create a configuration in the  Metadata UI  ->  http://10.215.12.91:3030/#  (port number may vary)  Run the  Metadata UI  -> Click on the  Manage JSON mapping  tab  Select the environment where you want to create the configuration.\n      Click on Refresh   to load the current configuration list.\n       Click on the  +  to create new configurations   Enter the name of the configuration. This will also be the rowkey in HBase, hence this needs to be unique.  Click on  OK  to create config.     A new configuration will be added with empty JSON.     Additional additional fields such as API Name, URI etc.     Click on the save icon   to save the configuration to HBase.",
            "title": "Create New Configuration in Metadata UI"
        },
        {
            "location": "/setup_instruction/api/index.html#add-json-configuration",
            "text": "Danger  Currently different version of the configuration is only maintained at HBase end, hence refresh to reload the configuration before saving your changes in order to avoid overwrite issues.      At this point you have an empty configuration created.  Please add the required JSON in the JSON Editor and click on Save again.   In the Configuration we have four sections    requestparam_Validation  - Input Validation  Titan  - Titan Query  tables  - HBase Table Configuration  response  - Create JSON response     Here is a sample JSON ( Detailed explanation has been provided later ).      1\n  2\n  3\n  4\n  5\n  6\n  7\n  8\n  9\n 10\n 11\n 12\n 13\n 14\n 15\n 16\n 17\n 18\n 19\n 20\n 21\n 22\n 23\n 24\n 25\n 26\n 27\n 28\n 29\n 30\n 31\n 32\n 33\n 34\n 35\n 36\n 37\n 38\n 39\n 40\n 41\n 42\n 43\n 44\n 45\n 46\n 47\n 48\n 49\n 50\n 51\n 52\n 53\n 54\n 55\n 56\n 57\n 58\n 59\n 60\n 61\n 62\n 63\n 64\n 65\n 66\n 67\n 68\n 69\n 70\n 71\n 72\n 73\n 74\n 75\n 76\n 77\n 78\n 79\n 80\n 81\n 82\n 83\n 84\n 85\n 86\n 87\n 88\n 89\n 90\n 91\n 92\n 93\n 94\n 95\n 96\n 97\n 98\n 99\n100\n101\n102\n103 { \n   \"requestparam_Validation\" :   { \n     \"default\" :   { \n       \"parameters\" :   [ \n         { \n           \"name\" :   \"claimNumber\" , \n           \"operator\" :   \"==\" , \n           \"required\" :   \"Yes\" \n         } \n       ], \n       \"control\" :   [ \n         { \n           \"limit\" :   \"20\" , \n           \"offset\" :   \"0\" , \n           \"sort\" :   \"\" \n         } \n       ] \n     } \n   }, \n   \"Titan\" :   { \n     \"request\" :   { \n       \"default\" :   [ \n         { \n           \"query\" :   { \n             \"queryName\" :   \"claimPayment\" , \n             \"claimPayment\" :   [ \n               { \n                 \"ops\" :   \"has\" , \n                 \"attr\" :   \"Claim_Number\" , \n                 \"value\" :   \"#claimNumber#\" \n               }, \n               { \n                 \"ops\" :   \"hasLabel\" , \n                 \"value\" :   \"Claim\" \n               }, \n               { \n                 \"ops\" :   \"out\" , \n                 \"attr\" :   \"has_a_Payment\" \n               }, \n               { \n                 \"ops\" :   \"valueMap\" , \n                 \"attr\" :   \"vid\" \n               } \n             ] \n           }, \n           \"response\" :   {} \n         } \n       ] \n     } \n   }, \n   \"tables\" :   { \n     \"T_CLM_PY\" :   { \n       \"queryName\" :   \"claimPayment\" , \n       \"columns\" :   [ \n         \"b.N_PY_PERIODS\" \n       ] \n     } \n   }, \n   \"response\" :   [ \n     { \n       \"type\" :   \"array\" , \n       \"field\" :   \"items\" , \n       \"tableName\" :   \"CLAIM_PAYMENT\" , \n       \"columnName\" :   \"DAYS_NOT_PAID\" , \n       \"injectTableName\" :   \"PAYMENTS\" , \n       \"children\" :   [ \n         { \n           \"type\" :   \"custom\" , \n           \"field\" :   \"self\" , \n           \"methodName\" :   \"getDaysNotPaid_Self\" \n         }, \n         { \n           \"type\" :   \"generic\" , \n           \"field\" :   \"number\" , \n           \"tableName\" :   \"PAYMENTS\" , \n           \"columnName\" :   \"NUMBER\" , \n           \"dtype\" :   \"string\" \n         }, \n         { \n           \"field\" :   \"excludeReasonCode\" , \n           \"tableName\" :   \"PAYMENTS\" , \n           \"columnName\" :   \"N_PYBL_DAY_CD\" , \n           \"type\" :   \"generic\" , \n           \"dtype\" :   \"string\" \n         }, \n         { \n           \"field\" :   \"excludeStartDate\" , \n           \"tableName\" :   \"PAYMENTS\" , \n           \"columnName\" :   \"STRT_DT\" , \n           \"type\" :   \"generic\" , \n           \"dtype\" :   \"string\" \n         }, \n         { \n           \"field\" :   \"excludeEndDate\" , \n           \"tableName\" :   \"PAYMENTS\" , \n           \"columnName\" :   \"END_DT\" , \n           \"type\" :   \"generic\" , \n           \"dtype\" :   \"string\" \n         } \n       ] \n     } \n   ]  }",
            "title": "Add JSON Configuration"
        },
        {
            "location": "/setup_instruction/api/index.html#update-appnameyml-file",
            "text": "Next we need to add the rowkey to the  <appname>.yml  file so that the JSON Configuration can be loaded during server startup.  In the following example, total 4 rowkeys were added.   Multiple rowkey can be added using comma (,) separator.   1 newmapping :   paymentAdjustment,overpayments,daysNotPaid,retrieveAbsenceByID     Info   Above  claimservice.yml  was updated inside the eos-config-services project.",
            "title": "Update &lt;appname&gt;.yml file"
        },
        {
            "location": "/setup_instruction/api/index.html#load-config-in-code",
            "text": "To access the loaded configuration in Java code, use the following code     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11 class   < BusinessLayer > \n     @Autowired \n     EntityMetadataConfig   metadataConfig ; \n\n     public   ResponseEntity < String >   get < Function >( Map < String ,   String >   requestParams ){ \n\n         Map   jsonConfig = metadataConfig . getMappingMetaData (). get ( \"add rowkey here\" ); \n\n         ... \n\n      }   \n* Now the above  jsonConfig  can be used in different components of the code.",
            "title": "Load Config in Code"
        },
        {
            "location": "/user-guide/input-validation/index.html",
            "text": "Input Validation\n\n\nCurrently Supported Features:\u200b\n\n\n\n\nAutomated Parameter Validation Error\u200b\n\n\nMultiple scenarios\u200b\n\n\nDefault Values\u200b\n\n\nOptional Parameters\u200b\n\n\nFilters unwanted parameters\u200b ( or allow all parameters)\n\n\nRSQL\u200b\n\n\nURL Path Parameters\u200b\n\n\nHTTP Request Parameters\u200b\n\n\nControl Parameters\u200b\n\n\nSorting\u200b\n\n\nLimit\u200b\n\n\nOffsets\u200b\n\n\n\n\nJSON Configuration\n\n\nDefine Scenarios\n\n\n\n\nThere could be more than one search scenario supported by the API.\n\n\nDefine each scenario here so that\n\n\nSpecific scenario will be selected based on input parameters.  \n\n\nThe validation will work on selected scenario.\n\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n\"requestparam_Validation\"\n:\n \n{\n\n    \n\"scenario_1\"\n:\n \n{\n\n      \n\"parameters\"\n:\n \n[\n\n        \n{\n\n\n        \n}\n\n      \n],\n\n      \n\"control\"\n:\n \n[\n\n\n      \n]\n\n    \n},\n\n    \n\"scenario_2\"\n:\n \n{\n\n      \n\"parameters\"\n:\n \n[\n\n        \n{\n\n\n        \n}\n\n      \n],\n\n      \n\"control\"\n:\n \n[\n\n\n      \n]\n\n    \n}\n\n  \n}\n\n\n\n\n\n\n\nDefine Parameters for specific scenario\n\n\n\n\nYou can define two types of parameters.\n\n\n\n\nRequest Parameters\n\n\n\n\nAll the available parameters such as HTTP Request Parameters, RSQL etc will be added to the common Map object and will be available for validation.\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n\"parameters\"\n:\n \n[\n\n    \n{\n\n      \n\"name\"\n:\n \n\"claimNumber\"\n,\n\n      \n\"operator\"\n:\n \n\"==\"\n,\n\n      \n\"required\"\n:\n \n\"Yes\"\n\n    \n}\n\n  \n]\n\n\n\n\n\n\n\nControl Parameters\n\n\n1\n2\n3\n4\n5\n6\n7\n\"control\"\n:\n \n[\n\n    \n{\n\n      \n\"limit\"\n:\n \n\"20\"\n,\n\n      \n\"offset\"\n:\n \n\"0\"\n,\n\n      \n\"sort\"\n:\n \n\"\"\n\n    \n}\n\n  \n]\n\n\n\n\n\n\n\nJava Code\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\nclass\n \n<\nBusinessLayer\n>{\n\n\n    \n@Autowired\n\n    \nEOSAPIFramework\n \neosAPIFramework\n;\n\n\n    \npublic\n \nResponseEntity\n<\nString\n>\n \nget\n<\nFunction\n>(\nMap\n<\nString\n,\n \nString\n>\n \nrequestParams\n\n            \n,\nMap\n<\nString\n,\n \nString\n>\n \npathParams\n)\n \n{\n    \n\n        \n...\n\n\n        \nEOSAPIFrameworkRequest\n \neosapiFrameworkRequest\n=\n \n            \neosAPIFramework\n\n            \n.\nrsqlParameterValidator\n\n            \n.\nvalidateRSQLParameters\n(\nrequestParams\n,\npathParams\n,\njsonConfig\n);\n\n\n        \n...\n\n    \n}\n\n\n}",
            "title": "Request Validation"
        },
        {
            "location": "/user-guide/input-validation/index.html#input-validation",
            "text": "",
            "title": "Input Validation"
        },
        {
            "location": "/user-guide/input-validation/index.html#currently-supported-features",
            "text": "Automated Parameter Validation Error\u200b  Multiple scenarios\u200b  Default Values\u200b  Optional Parameters\u200b  Filters unwanted parameters\u200b ( or allow all parameters)  RSQL\u200b  URL Path Parameters\u200b  HTTP Request Parameters\u200b  Control Parameters\u200b  Sorting\u200b  Limit\u200b  Offsets\u200b",
            "title": "Currently Supported Features:\u200b"
        },
        {
            "location": "/user-guide/input-validation/index.html#json-configuration",
            "text": "",
            "title": "JSON Configuration"
        },
        {
            "location": "/user-guide/input-validation/index.html#define-scenarios",
            "text": "There could be more than one search scenario supported by the API.  Define each scenario here so that  Specific scenario will be selected based on input parameters.    The validation will work on selected scenario.      1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22 \"requestparam_Validation\" :   { \n     \"scenario_1\" :   { \n       \"parameters\" :   [ \n         { \n\n         } \n       ], \n       \"control\" :   [ \n\n       ] \n     }, \n     \"scenario_2\" :   { \n       \"parameters\" :   [ \n         { \n\n         } \n       ], \n       \"control\" :   [ \n\n       ] \n     } \n   }",
            "title": "Define Scenarios"
        },
        {
            "location": "/user-guide/input-validation/index.html#define-parameters-for-specific-scenario",
            "text": "You can define two types of parameters.",
            "title": "Define Parameters for specific scenario"
        },
        {
            "location": "/user-guide/input-validation/index.html#request-parameters",
            "text": "All the available parameters such as HTTP Request Parameters, RSQL etc will be added to the common Map object and will be available for validation.   1\n2\n3\n4\n5\n6\n7 \"parameters\" :   [ \n     { \n       \"name\" :   \"claimNumber\" , \n       \"operator\" :   \"==\" , \n       \"required\" :   \"Yes\" \n     } \n   ]",
            "title": "Request Parameters"
        },
        {
            "location": "/user-guide/input-validation/index.html#control-parameters",
            "text": "1\n2\n3\n4\n5\n6\n7 \"control\" :   [ \n     { \n       \"limit\" :   \"20\" , \n       \"offset\" :   \"0\" , \n       \"sort\" :   \"\" \n     } \n   ]",
            "title": "Control Parameters"
        },
        {
            "location": "/user-guide/input-validation/index.html#java-code",
            "text": "1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18 class   < BusinessLayer >{ \n\n     @Autowired \n     EOSAPIFramework   eosAPIFramework ; \n\n     public   ResponseEntity < String >   get < Function >( Map < String ,   String >   requestParams \n             , Map < String ,   String >   pathParams )   {     \n\n         ... \n\n         EOSAPIFrameworkRequest   eosapiFrameworkRequest =  \n             eosAPIFramework \n             . rsqlParameterValidator \n             . validateRSQLParameters ( requestParams , pathParams , jsonConfig ); \n\n         ... \n     }  }",
            "title": "Java Code"
        },
        {
            "location": "/user-guide/titan-query/index.html",
            "text": "Titan Query Adapter\n\n\n\n\nAbstract\n\n\nTitanQueryAdapter can be used to connect to the Titan graph data base in order to get the \nrowkey(s)\n or \nvid(s)\n based on the traversal. This Adapter will return the list of RowKeys based on the titan query. The HBase Data Load component then can use the \nrowkey(s)\n to query HBase to get the actual entity details and to populate in service response.\n\n\n\n\nOverview\n\n\n\n\nThe \ntitan_query\n section needs to be added in the JSON Configuration.\n\n\nTitanQueryAdapter reads the configuration and generates the query.- \n\n\nTitanQueryAdapter will execute dynamically generated query and return the RowKeys for each table\n\n\n\n\nSupported Features\n\n\n\n\n\n\n\n\nFeature Name\n\n\nSub Feature name\n\n\n\n\n\n\n\n\n\n\nTitan Functions\n\n\nHas\nHasLabel\nOut\n As\n OrderBy\n Range\n Limit\n ValueMap\n In\n Both\n Select\n By\n IndexQuery\n\n\n\n\n\n\nMultiple Scenarios\n\n\nNA\n\n\n\n\n\n\nIndex Query\n\n\nMixedIndex\nComposite Index\n\n\n\n\n\n\nWild Char Search\n\n\nSingle Parameter\n Multiple Parameter\n\n\n\n\n\n\nException Handling\n\n\nNA\n\n\n\n\n\n\n\n\nRequest Details\n\n\n\n\n\n\n\n\nRequest Parameter\n\n\nRequest Type\n\n\nRequest Fields\n\n\n\n\n\n\n\n\n\n\napiFrameworkRequest\n\n\nEOSAPIFrameworkRequest\n\n\ntitanQueryType\nrequestParamMap\n\n\n\n\n\n\n\n\nResponse Details\n\n\n\n\n\n\n\n\nResponse Parameter\n\n\nResponse Type\n\n\nResponse Fields\n\n\n\n\n\n\n\n\n\n\napiFrameworkResponse\n\n\nEOSAPIFrameworkResponse\n\n\nflatGraphRowKeyMap\nmapKeys\n\n\n\n\n\n\n\n\nPre requisites(Entry Condition)\n\n\n\n\nRequest parameters needs to be validated and converted to RequestParamMap\n before calling TitanQueryAdapter\n\n\nRSQL string should be validated and converted to RequestParamMap\n before calling TitanQueryAdapter\n\n\nScenario name should be passed to TitanQueryAdapter. This is main key to pick the Titan query map from the configuration\n\n\n\n\nTitanQueryAdapter Sequance diagram\n\n\n\n\nBasic Structure\n\n\n\n\nBelow is the sample configuration for simple titan query\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n\"Titan\"\n:\n \n{\n\n    \n\"request\"\n:\n \n{\n\n      \n\"default\"\n:\n \n[\n\n        \n{\n\n          \n\"query\"\n:\n \n{\n\n            \n\"queryName\"\n:\n \n\"claimPayment\"\n,\n\n            \n\"claimPayment\"\n:\n \n[\n\n              \n{\n\n                \n\"ops\"\n:\n \n\"has\"\n,\n\n                \n\"attr\"\n:\n \n\"Claim_Number\"\n,\n\n                \n\"value\"\n:\n \n\"#claimNumber#\"\n\n              \n},\n\n              \n{\n\n                \n\"ops\"\n:\n \n\"hasLabel\"\n,\n\n                \n\"value\"\n:\n \n\"Claim\"\n\n              \n},\n\n              \n{\n\n                \n\"ops\"\n:\n \n\"out\"\n,\n\n                \n\"attr\"\n:\n \n\"has_a_Payment\"\n\n              \n},\n\n              \n{\n\n                \n\"ops\"\n:\n \n\"valueMap\"\n,\n\n                \n\"attr\"\n:\n \n\"vid\"\n\n              \n}\n\n            \n]\n\n          \n},\n\n          \n\"response\"\n:\n \n{}\n\n        \n}\n\n      \n]\n\n    \n}\n\n\n}\n\n\n\n\n\n\n\nComplex example (Skip if not required)\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n\"tian_query\"\n:\n \n{\n\n    \n\"request\"\n:\n \n{\n\n      \n\"selectQuery\"\n:\n \n[\n\n        \n{\n\n          \n\"query\"\n:\n \n{\n\n            \n\"queryName\"\n:\n \n\"absenceRequest\"\n,\n\n            \n\"absenceRequest\"\n:\n \n[\n\n              \n{\n\n                \n\"ops\"\n:\n \n\"hasLabel\"\n,\n\n                \n\"attr\"\n:\n \n\"AbsenceRequest\"\n\n              \n},\n\n              \n{\n\n                \n\"ops\"\n:\n \n\"has\"\n,\n\n                \n\"attr\"\n:\n \n\"Absence_Number_Code\"\n,\n\n                \n\"value\"\n:\n \n\"#claimNumber#\"\n\n              \n},\n\n              \n{\n\n                \n\"ops\"\n:\n \n\"as\"\n,\n\n                \n\"attr\"\n:\n \n\"AbsenceRequest\"\n\n              \n},\n\n              \n{\n\n                \n\"ops\"\n:\n \n\"in\"\n,\n\n                \n\"attr\"\n:\n \n\"has_a_AbsenceRequest\"\n\n              \n},\n\n              \n{\n\n                \n\"ops\"\n:\n \n\"as\"\n,\n\n                \n\"attr\"\n:\n \n\"Member\"\n\n              \n},\n\n              \n{\n\n                \n\"ops\"\n:\n \n\"out\"\n,\n\n                \n\"attr\"\n:\n \n\"has_Contact\"\n\n              \n},\n\n              \n{\n\n                \n\"ops\"\n:\n \n\"as\"\n,\n\n                \n\"attr\"\n:\n \n\"ContactMethod\"\n\n              \n},\n\n              \n{\n\n                \n\"ops\"\n:\n \n\"select\"\n,\n\n                \n\"attr\"\n:\n \n\"Member\"\n\n              \n},\n\n              \n{\n\n                \n\"ops\"\n:\n \n\"in\"\n,\n\n                \n\"attr\"\n:\n \n\"has_a_Member\"\n\n              \n},\n\n              \n{\n\n                \n\"ops\"\n:\n \n\"hasLabel\"\n,\n\n                \n\"attr\"\n:\n \n\"GroupCustomer\"\n\n              \n},\n\n              \n{\n\n                \n\"ops\"\n:\n \n\"out\"\n,\n\n                \n\"attr\"\n:\n \n\"is_another\"\n\n              \n},\n\n              \n{\n\n                \n\"ops\"\n:\n \n\"as\"\n,\n\n                \n\"attr\"\n:\n \n\"Customer\"\n\n              \n},\n\n              \n{\n\n                \n\"ops\"\n:\n \n\"select\"\n,\n\n                \n\"attr\"\n:\n \n\"AbsenceRequest,Member,ContactMethod,Customer\"\n\n              \n},\n\n              \n{\n\n                \n\"ops\"\n:\n \n\"by\"\n,\n\n                \n\"attr\"\n:\n \n\"vid\"\n\n              \n},\n\n              \n{\n\n                \n\"ops\"\n:\n \n\"dedup\"\n\n              \n}\n\n            \n]\n\n          \n},\n\n          \n\"response\"\n:\n \n{}\n\n        \n}\n\n      \n]\n\n    \n}\n\n  \n}\n\n\n\n\n\n\n\n\nBelow is the sample code snippet to invoke titanQueryAdapter from controller/business deligater.\n\n\n\n\n1\n2\n3\n4\nEOSAPIFrameworkResponse\n \neosapiFrameworkResponse\n \n=\n  \n    \neosAPIFramework\n.\ntitanQueryAdapter\n\n        \n.\ngetTitanRowKeys\n(\neosapiFrameworkRequest\n,\n \n            \n(\nMap\n)\njsonConfig\n.\nget\n(\n\"Titan\"\n));\n \n\n\n\n\n\n\n\n\nTitanQueryAdapter read the configuration from cache/DB using the config map  .\n\n\nTitanQueryAdapter will convert the configuration(above) into Titan query using Gramlin api.\n\n\nTitanQueryAdapter will read the dynamic values( input query parameters ) from the EOSAPIFrameworkRequest.requestParamMap\n\n\nWhen ever TitanQueryAdapter encounters #<value# then it will read the corresponding value from the EOSAPIFrameworkRequest.requestParamMap.\n\n\n\n\n1\n2\ntitanConnection\n.\ngetGraph\n().\ntraversal\n().\nV\n().\nhas\n(\n\"Claim_Number\"\n,\n#\nclaimNumber\n#\n)\n\n                    \n.\nhasLabel\n(\n\"Claim\"\n).\nout\n(\n\"has_a_Payment\"\n).\nvalueMap\n(\n\"vid\"\n);\n\n\n\n\n\n\n\n\n\nbelow is the sample response TitanQueryAdapter will return back  for the above titan configuration.\n\n1\n2\n3\n4\n5\n{\n\n  \nclaimPayment=[\n\n    \n-1050846467411942099\n\n  \n]\n\n\n}\n\n\n\n\n\n\n\n\nComplex example (Skip if not required)\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n{\n\n  \nabsenceRequest=[\n\n    \n{\n\n      \nTitanQueryRelationResult=[\n\n        \n{\n\n          \nAbsenceRequest=5942163829025099943,\n\n          \nMember=-8668377820092427996,\n\n          \nContactMethod=5126035711794990839,\n\n          \nCustomer=1345563336256692547\n\n        \n}\n,\n\n        \n{\n\n          \nAbsenceRequest=5942163829025099943,\n\n          \nMember=-8668377820092427996,\n\n          \nContactMethod=7197611608030668910,\n\n          \nCustomer=1345563336256692547\n\n        \n}\n,\n\n        \n{\n\n          \nAbsenceRequest=5942163829025099943,\n\n          \nMember=-8668377820092427996,\n\n          \nContactMethod=-8717648880362260307,\n\n          \nCustomer=1345563336256692547\n\n        \n}\n\n      \n],\n\n      \nCustomer=\n[\n\n        \n1345563336256692547\n,\n\n        \n1345563336256692547\n,\n\n        \n1345563336256692547\n\n      \n]\n,\n\n      \nAbsenceRequest=\n[\n\n        \n5942163829025099943\n,\n\n        \n5942163829025099943\n,\n\n        \n5942163829025099943\n\n      \n]\n,\n\n      \nContactMethod=\n[\n\n        \n5126035711794990839\n,\n\n        \n7197611608030668910\n,\n\n        \n-8717648880362260307\n\n      \n]\n,\n\n      \nMember=\n[\n\n        \n-8668377820092427996\n,\n\n        \n-8668377820092427996\n,\n\n        \n-8668377820092427996\n\n      \n]\n\n    \n}\n\n  \n]\n\n\n}\n \n\n\n\n\n\nTitan Operations\n\n\nhas\n\n\n\n\nThis will Filters vertices, edges and vertex properties based on the existence of properties. Below are the atrributes should define in the confguration.  \n\n\n\n\n\n\n\n\n\n\nAttributeName\n\n\nAttributeValue\n\n\n\n\n\n\n\n\n\n\nops\n\n\nhas\n\n\n\n\n\n\nattr\n\n\nTitan vertex attribute name\n\n\n\n\n\n\nvalue\n\n\nTitan vertex attribute value\n\n\n\n\n\n\n\n\n\n\nExample\n\n\n1\n2\n3\n4\n5\n  \n{\n\n    \n\"ops\"\n:\n \n\"has\"\n,\n\n    \n\"attr\"\n:\n \n\"Absence_Number_Code\"\n,\n\n    \n\"value\"\n:\n \n\"#claimNumber#\"\n\n  \n}\n\n\n\n\n\n\n\n\n\nhasLabel\n\n\n\n\nThis will Filters vertices, edges and vertex properties based on their label.This should be included when we need to query on specific vertex ( ex. GroupCustomer,Member) .Below are the atrributes should define in the confguration for hasLabel. \n\n\n\n\n\n\n\n\n\n\nAttributeName\n\n\nAttributeValue\n\n\n\n\n\n\n\n\n\n\nops\n\n\nhasLabel\n\n\n\n\n\n\nvalue\n\n\nTitan vertex label name\n\n\n\n\n\n\n\n\n\n\nExample\n\n\n1\n2\n3\n4\n  \n{\n\n    \n\"ops\"\n:\n \n\"hasLabel\"\n,\n\n    \n\"attr\"\n:\n \n\"AbsenceRequest\"\n\n  \n}\n\n\n\n\n\n\n\n\n\nvalueMap\n\n\n\n\nThis will Map the Element to the values of the associated properties given the provide property keys. Below are the atrributes should define in the confguration for valueMap.\n\n\n\n\n\n\n\n\n\n\nAttributeName\n\n\nAttributeValue\n\n\n\n\n\n\n\n\n\n\nops\n\n\nvalueMap\n\n\n\n\n\n\nattr\n\n\nTitan vertex attribute name\n\n\n\n\n\n\n\n\n\n\nExample\n\n\n1\n2\n3\n4\n  \n{\n\n    \n\"ops\"\n:\n \n\"valueMap\"\n,\n\n    \n\"attr\"\n:\n \n\"vid\"\n\n  \n}\n\n\n\n\n\n\n\n\n\nout\n\n\n\n\nThis will Map the Vertex to its outgoing adjacent vertices given the edge labels. Below are the atrributes should define in the confguration for valueMap.\n\n\n\n\n\n\n\n\n\n\nAttributeName\n\n\nAttributeValue\n\n\n\n\n\n\n\n\n\n\nops\n\n\nout\n\n\n\n\n\n\nattr\n\n\nTitan vertex attribute name\n\n\n\n\n\n\n\n\n\n\nExample\n\n\n1\n2\n3\n4\n  \n{\n\n    \n\"ops\"\n:\n \n\"out\"\n,\n\n    \n\"attr\"\n:\n \n\"has_a_Payment\"\n\n  \n}\n\n\n\n\n\n\n\n\n\nin\n\n\n\n\nThis will Map the Vertex to its incoming adjacent vertices given the edge labels. Below are the atrributes should define in the confguration for in.\n\n\n\n\n\n\n\n\n\n\nAttributeName\n\n\nAttributeValue\n\n\n\n\n\n\n\n\n\n\nops\n\n\nin\n\n\n\n\n\n\nattr\n\n\nTitan vertex attribute name\n\n\n\n\n\n\n\n\n\n\nExample\n\n\n1\n2\n3\n4\n  \n{\n\n    \n\"ops\"\n:\n \n\"in\"\n,\n\n    \n\"attr\"\n:\n \n\"has_a_Member\"\n\n  \n}\n\n\n\n\n\n\n\n\n\nselect\n\n\n\n\nThis will Map the Traverser to the object specified by the selectKey. Below are the atrributes should define in the confguration for select.\n\n\n\n\n\n\n\n\n\n\nAttributeName\n\n\nAttributeValue\n\n\n\n\n\n\n\n\n\n\nops\n\n\nselect\n\n\n\n\n\n\nattr\n\n\nTitan vertex label name\n\n\n\n\n\n\n\n\n\n\nExample\n\n\n1\n2\n3\n4\n  \n{\n\n    \n\"ops\"\n:\n \n\"select\"\n,\n\n    \n\"attr\"\n:\n \n\"AbsenceRequest,Member,ContactMethod,Customer\"\n\n  \n}\n\n\n\n\n\n\n\n\n\nas\n\n\n\n\nA step modulator that provides a lable to the step that can be accessed later in the traversal by other steps. Below are the atrributes should define in the confguration for as.\n\n\n\n\n\n\n\n\n\n\nAttributeName\n\n\nAttributeValue\n\n\n\n\n\n\n\n\n\n\nops\n\n\nas\n\n\n\n\n\n\nattr\n\n\nUnique reference name\n\n\n\n\n\n\n\n\n\n\nExample\n\n\n1\n2\n3\n4\n  \n{\n\n    \n\"ops\"\n:\n \n\"as\"\n,\n\n    \n\"attr\"\n:\n \n\"AbsenceRequest\"\n\n  \n}\n\n\n\n\n\n\n\n\n\nby\n\n\n\n\nThe by() can be applied to a number of different step to alter their behaviors. Below are the atrributes should define in the confguration for by.\n\n\n\n\n\n\n\n\n\n\nAttributeName\n\n\nAttributeValue\n\n\n\n\n\n\n\n\n\n\nops\n\n\nby\n\n\n\n\n\n\nattr\n\n\nTitan vertex attribute name\n\n\n\n\n\n\n\n\n\n\nExample\n\n\n1\n2\n3\n4\n  \n{\n\n    \n\"ops\"\n:\n \n\"by\"\n,\n\n    \n\"attr\"\n:\n \n\"vid\"\n\n  \n}\n\n\n\n\n\n\n\n\n\ndedup\n\n\n\n\nThis will Remove all duplicates in the traversal stream up to this point. Below are the atrributes should define in the confguration for dedup.\n\n\n\n\n\n\n\n\n\n\nAttributeName\n\n\nAttributeValue\n\n\n\n\n\n\n\n\n\n\nops\n\n\ndedup\n\n\n\n\n\n\n\n\n\n\nExample\n\n\n1\n2\n3\n  \n{\n\n    \n\"ops\"\n:\n \n\"dedup\"\n        \n  \n}\n\n\n\n\n\n\n\n\n\norder\n\n\n\n\nThis will Order all the objects in the traversal up to this point and then emit them one-by-one in their ordered sequence. Below are the atrributes should define in the confguration for order.\n\n\n\n\n\n\n\n\n\n\nAttributeName\n\n\nAttributeValue\n\n\n\n\n\n\n\n\n\n\nops\n\n\norder\n\n\n\n\n\n\nattr\n\n\nTitan vertex attribute name\n\n\n\n\n\n\n\n\n\n\nExample\n\n\n1\n2\n3\n4\n  \n{\n\n    \n\"ops\"\n:\n \n\"order\"\n,\n\n    \n\"attr\"\n:\n \n\"address_effective_date\"\n\n  \n}\n\n\n\n\n\n\n\n\n\nlimit\n\n\n\n\nThis will limit the traversal objects to the limit argument. THis will allow first n objects defined by the limit argument. Below are the atrributes should define in the confguration for limit.\n\n\n\n\n\n\n\n\n\n\nAttributeName\n\n\nAttributeValue\n\n\n\n\n\n\n\n\n\n\nops\n\n\nlimit\n\n\n\n\n\n\nvalue\n\n\nnumber\n\n\n\n\n\n\n\n\n\n\nExample\n\n\n1\n2\n3\n4\n  \n{\n\n    \n\"ops\"\n:\n \n\"limit\"\n,\n\n    \n\"attr\"\n:\n \n\"10\"\n\n  \n}\n\n\n\n\n\n\n\n\n\nboth\n\n\n\n\nThis will Map the Vertex to its adjacent vertices given the edge labels.. Below are the atrributes should define in the confguration for limit.\n\n\n\n\n\n\n\n\n\n\nAttributeName\n\n\nAttributeValue\n\n\n\n\n\n\n\n\n\n\nops\n\n\nboth\n\n\n\n\n\n\nattr\n\n\nTitan vertex label name\n\n\n\n\n\n\n\n\nrange\n\n\n\n\nThis will Filter the objects in the traversal by the number of them to pass through the stream. Below are the atrributes should define in the confguration for range.\n\n\n\n\n\n\n\n\n\n\nAttributeName\n\n\nAttributeValue\n\n\n\n\n\n\n\n\n\n\nops\n\n\nrange\n\n\n\n\n\n\nfrom\n\n\nnumber\n\n\n\n\n\n\nto\n\n\nnumber\n\n\n\n\n\n\n\n\n\n\nExample\n\n\n1\n2\n3\n4\n5\n  \n{\n\n    \n\"ops\"\n:\n \n\"range\"\n,\n\n    \n\"from\"\n:\n \n\"3\"\n,\n\n    \n\"to\"\n:\n \n\"10\"\n\n  \n}",
            "title": "Titan Query"
        },
        {
            "location": "/user-guide/titan-query/index.html#titan-query-adapter",
            "text": "Abstract  TitanQueryAdapter can be used to connect to the Titan graph data base in order to get the  rowkey(s)  or  vid(s)  based on the traversal. This Adapter will return the list of RowKeys based on the titan query. The HBase Data Load component then can use the  rowkey(s)  to query HBase to get the actual entity details and to populate in service response.",
            "title": "Titan Query Adapter"
        },
        {
            "location": "/user-guide/titan-query/index.html#overview",
            "text": "The  titan_query  section needs to be added in the JSON Configuration.  TitanQueryAdapter reads the configuration and generates the query.-   TitanQueryAdapter will execute dynamically generated query and return the RowKeys for each table",
            "title": "Overview"
        },
        {
            "location": "/user-guide/titan-query/index.html#supported-features",
            "text": "Feature Name  Sub Feature name      Titan Functions  Has HasLabel Out  As  OrderBy  Range  Limit  ValueMap  In  Both  Select  By  IndexQuery    Multiple Scenarios  NA    Index Query  MixedIndex Composite Index    Wild Char Search  Single Parameter  Multiple Parameter    Exception Handling  NA",
            "title": "Supported Features"
        },
        {
            "location": "/user-guide/titan-query/index.html#request-details",
            "text": "Request Parameter  Request Type  Request Fields      apiFrameworkRequest  EOSAPIFrameworkRequest  titanQueryType requestParamMap",
            "title": "Request Details"
        },
        {
            "location": "/user-guide/titan-query/index.html#response-details",
            "text": "Response Parameter  Response Type  Response Fields      apiFrameworkResponse  EOSAPIFrameworkResponse  flatGraphRowKeyMap mapKeys",
            "title": "Response Details"
        },
        {
            "location": "/user-guide/titan-query/index.html#pre-requisitesentry-condition",
            "text": "Request parameters needs to be validated and converted to RequestParamMap  before calling TitanQueryAdapter  RSQL string should be validated and converted to RequestParamMap  before calling TitanQueryAdapter  Scenario name should be passed to TitanQueryAdapter. This is main key to pick the Titan query map from the configuration",
            "title": "Pre requisites(Entry Condition)"
        },
        {
            "location": "/user-guide/titan-query/index.html#titanqueryadapter-sequance-diagram",
            "text": "",
            "title": "TitanQueryAdapter Sequance diagram"
        },
        {
            "location": "/user-guide/titan-query/index.html#basic-structure",
            "text": "Below is the sample configuration for simple titan query    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31 \"Titan\" :   { \n     \"request\" :   { \n       \"default\" :   [ \n         { \n           \"query\" :   { \n             \"queryName\" :   \"claimPayment\" , \n             \"claimPayment\" :   [ \n               { \n                 \"ops\" :   \"has\" , \n                 \"attr\" :   \"Claim_Number\" , \n                 \"value\" :   \"#claimNumber#\" \n               }, \n               { \n                 \"ops\" :   \"hasLabel\" , \n                 \"value\" :   \"Claim\" \n               }, \n               { \n                 \"ops\" :   \"out\" , \n                 \"attr\" :   \"has_a_Payment\" \n               }, \n               { \n                 \"ops\" :   \"valueMap\" , \n                 \"attr\" :   \"vid\" \n               } \n             ] \n           }, \n           \"response\" :   {} \n         } \n       ] \n     }  }    Complex example (Skip if not required)  1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74 \"tian_query\" :   { \n     \"request\" :   { \n       \"selectQuery\" :   [ \n         { \n           \"query\" :   { \n             \"queryName\" :   \"absenceRequest\" , \n             \"absenceRequest\" :   [ \n               { \n                 \"ops\" :   \"hasLabel\" , \n                 \"attr\" :   \"AbsenceRequest\" \n               }, \n               { \n                 \"ops\" :   \"has\" , \n                 \"attr\" :   \"Absence_Number_Code\" , \n                 \"value\" :   \"#claimNumber#\" \n               }, \n               { \n                 \"ops\" :   \"as\" , \n                 \"attr\" :   \"AbsenceRequest\" \n               }, \n               { \n                 \"ops\" :   \"in\" , \n                 \"attr\" :   \"has_a_AbsenceRequest\" \n               }, \n               { \n                 \"ops\" :   \"as\" , \n                 \"attr\" :   \"Member\" \n               }, \n               { \n                 \"ops\" :   \"out\" , \n                 \"attr\" :   \"has_Contact\" \n               }, \n               { \n                 \"ops\" :   \"as\" , \n                 \"attr\" :   \"ContactMethod\" \n               }, \n               { \n                 \"ops\" :   \"select\" , \n                 \"attr\" :   \"Member\" \n               }, \n               { \n                 \"ops\" :   \"in\" , \n                 \"attr\" :   \"has_a_Member\" \n               }, \n               { \n                 \"ops\" :   \"hasLabel\" , \n                 \"attr\" :   \"GroupCustomer\" \n               }, \n               { \n                 \"ops\" :   \"out\" , \n                 \"attr\" :   \"is_another\" \n               }, \n               { \n                 \"ops\" :   \"as\" , \n                 \"attr\" :   \"Customer\" \n               }, \n               { \n                 \"ops\" :   \"select\" , \n                 \"attr\" :   \"AbsenceRequest,Member,ContactMethod,Customer\" \n               }, \n               { \n                 \"ops\" :   \"by\" , \n                 \"attr\" :   \"vid\" \n               }, \n               { \n                 \"ops\" :   \"dedup\" \n               } \n             ] \n           }, \n           \"response\" :   {} \n         } \n       ] \n     } \n   }     Below is the sample code snippet to invoke titanQueryAdapter from controller/business deligater.   1\n2\n3\n4 EOSAPIFrameworkResponse   eosapiFrameworkResponse   =   \n     eosAPIFramework . titanQueryAdapter \n         . getTitanRowKeys ( eosapiFrameworkRequest ,  \n             ( Map ) jsonConfig . get ( \"Titan\" ));      TitanQueryAdapter read the configuration from cache/DB using the config map  .  TitanQueryAdapter will convert the configuration(above) into Titan query using Gramlin api.  TitanQueryAdapter will read the dynamic values( input query parameters ) from the EOSAPIFrameworkRequest.requestParamMap  When ever TitanQueryAdapter encounters #<value# then it will read the corresponding value from the EOSAPIFrameworkRequest.requestParamMap.   1\n2 titanConnection . getGraph (). traversal (). V (). has ( \"Claim_Number\" , # claimNumber # ) \n                     . hasLabel ( \"Claim\" ). out ( \"has_a_Payment\" ). valueMap ( \"vid\" );     below is the sample response TitanQueryAdapter will return back  for the above titan configuration. 1\n2\n3\n4\n5 { \n   claimPayment=[ \n     -1050846467411942099 \n   ]  }     Complex example (Skip if not required)  1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46 { \n   absenceRequest=[ \n     { \n       TitanQueryRelationResult=[ \n         { \n           AbsenceRequest=5942163829025099943, \n           Member=-8668377820092427996, \n           ContactMethod=5126035711794990839, \n           Customer=1345563336256692547 \n         } , \n         { \n           AbsenceRequest=5942163829025099943, \n           Member=-8668377820092427996, \n           ContactMethod=7197611608030668910, \n           Customer=1345563336256692547 \n         } , \n         { \n           AbsenceRequest=5942163829025099943, \n           Member=-8668377820092427996, \n           ContactMethod=-8717648880362260307, \n           Customer=1345563336256692547 \n         } \n       ], \n       Customer= [ \n         1345563336256692547 , \n         1345563336256692547 , \n         1345563336256692547 \n       ] , \n       AbsenceRequest= [ \n         5942163829025099943 , \n         5942163829025099943 , \n         5942163829025099943 \n       ] , \n       ContactMethod= [ \n         5126035711794990839 , \n         7197611608030668910 , \n         -8717648880362260307 \n       ] , \n       Member= [ \n         -8668377820092427996 , \n         -8668377820092427996 , \n         -8668377820092427996 \n       ] \n     } \n   ]  }",
            "title": "Basic Structure"
        },
        {
            "location": "/user-guide/titan-query/index.html#titan-operations",
            "text": "",
            "title": "Titan Operations"
        },
        {
            "location": "/user-guide/titan-query/index.html#has",
            "text": "This will Filters vertices, edges and vertex properties based on the existence of properties. Below are the atrributes should define in the confguration.        AttributeName  AttributeValue      ops  has    attr  Titan vertex attribute name    value  Titan vertex attribute value      Example  1\n2\n3\n4\n5    { \n     \"ops\" :   \"has\" , \n     \"attr\" :   \"Absence_Number_Code\" , \n     \"value\" :   \"#claimNumber#\" \n   }",
            "title": "has"
        },
        {
            "location": "/user-guide/titan-query/index.html#haslabel",
            "text": "This will Filters vertices, edges and vertex properties based on their label.This should be included when we need to query on specific vertex ( ex. GroupCustomer,Member) .Below are the atrributes should define in the confguration for hasLabel.       AttributeName  AttributeValue      ops  hasLabel    value  Titan vertex label name      Example  1\n2\n3\n4    { \n     \"ops\" :   \"hasLabel\" , \n     \"attr\" :   \"AbsenceRequest\" \n   }",
            "title": "hasLabel"
        },
        {
            "location": "/user-guide/titan-query/index.html#valuemap",
            "text": "This will Map the Element to the values of the associated properties given the provide property keys. Below are the atrributes should define in the confguration for valueMap.      AttributeName  AttributeValue      ops  valueMap    attr  Titan vertex attribute name      Example  1\n2\n3\n4    { \n     \"ops\" :   \"valueMap\" , \n     \"attr\" :   \"vid\" \n   }",
            "title": "valueMap"
        },
        {
            "location": "/user-guide/titan-query/index.html#out",
            "text": "This will Map the Vertex to its outgoing adjacent vertices given the edge labels. Below are the atrributes should define in the confguration for valueMap.      AttributeName  AttributeValue      ops  out    attr  Titan vertex attribute name      Example  1\n2\n3\n4    { \n     \"ops\" :   \"out\" , \n     \"attr\" :   \"has_a_Payment\" \n   }",
            "title": "out"
        },
        {
            "location": "/user-guide/titan-query/index.html#in",
            "text": "This will Map the Vertex to its incoming adjacent vertices given the edge labels. Below are the atrributes should define in the confguration for in.      AttributeName  AttributeValue      ops  in    attr  Titan vertex attribute name      Example  1\n2\n3\n4    { \n     \"ops\" :   \"in\" , \n     \"attr\" :   \"has_a_Member\" \n   }",
            "title": "in"
        },
        {
            "location": "/user-guide/titan-query/index.html#select",
            "text": "This will Map the Traverser to the object specified by the selectKey. Below are the atrributes should define in the confguration for select.      AttributeName  AttributeValue      ops  select    attr  Titan vertex label name      Example  1\n2\n3\n4    { \n     \"ops\" :   \"select\" , \n     \"attr\" :   \"AbsenceRequest,Member,ContactMethod,Customer\" \n   }",
            "title": "select"
        },
        {
            "location": "/user-guide/titan-query/index.html#as",
            "text": "A step modulator that provides a lable to the step that can be accessed later in the traversal by other steps. Below are the atrributes should define in the confguration for as.      AttributeName  AttributeValue      ops  as    attr  Unique reference name      Example  1\n2\n3\n4    { \n     \"ops\" :   \"as\" , \n     \"attr\" :   \"AbsenceRequest\" \n   }",
            "title": "as"
        },
        {
            "location": "/user-guide/titan-query/index.html#by",
            "text": "The by() can be applied to a number of different step to alter their behaviors. Below are the atrributes should define in the confguration for by.      AttributeName  AttributeValue      ops  by    attr  Titan vertex attribute name      Example  1\n2\n3\n4    { \n     \"ops\" :   \"by\" , \n     \"attr\" :   \"vid\" \n   }",
            "title": "by"
        },
        {
            "location": "/user-guide/titan-query/index.html#dedup",
            "text": "This will Remove all duplicates in the traversal stream up to this point. Below are the atrributes should define in the confguration for dedup.      AttributeName  AttributeValue      ops  dedup      Example  1\n2\n3    { \n     \"ops\" :   \"dedup\"         \n   }",
            "title": "dedup"
        },
        {
            "location": "/user-guide/titan-query/index.html#order",
            "text": "This will Order all the objects in the traversal up to this point and then emit them one-by-one in their ordered sequence. Below are the atrributes should define in the confguration for order.      AttributeName  AttributeValue      ops  order    attr  Titan vertex attribute name      Example  1\n2\n3\n4    { \n     \"ops\" :   \"order\" , \n     \"attr\" :   \"address_effective_date\" \n   }",
            "title": "order"
        },
        {
            "location": "/user-guide/titan-query/index.html#limit",
            "text": "This will limit the traversal objects to the limit argument. THis will allow first n objects defined by the limit argument. Below are the atrributes should define in the confguration for limit.      AttributeName  AttributeValue      ops  limit    value  number      Example  1\n2\n3\n4    { \n     \"ops\" :   \"limit\" , \n     \"attr\" :   \"10\" \n   }",
            "title": "limit"
        },
        {
            "location": "/user-guide/titan-query/index.html#both",
            "text": "This will Map the Vertex to its adjacent vertices given the edge labels.. Below are the atrributes should define in the confguration for limit.      AttributeName  AttributeValue      ops  both    attr  Titan vertex label name",
            "title": "both"
        },
        {
            "location": "/user-guide/titan-query/index.html#range",
            "text": "This will Filter the objects in the traversal by the number of them to pass through the stream. Below are the atrributes should define in the confguration for range.      AttributeName  AttributeValue      ops  range    from  number    to  number      Example  1\n2\n3\n4\n5    { \n     \"ops\" :   \"range\" , \n     \"from\" :   \"3\" , \n     \"to\" :   \"10\" \n   }",
            "title": "range"
        },
        {
            "location": "/user-guide/hbase-load/index.html",
            "text": "HBase Data Load\n\n\n\n\nAbstract\n\n\nThe Framework uses the HBase Data Load Configurations in order to load the data from HBase.\n\n\n\n\n\n\nThe Configuration need to be defined in the \ntables\n section.\n\n\nqueryName\n : Needs to be specified to specific Titan Query, so that the \nvid\n will be used to fetch the data from HBase. \n\n\ncolumns\n :  List of the HBase column name with column family name.\n\n\nvariableName\n : This is optional attribute. In case in the previous Titan Query, a \nselect\n has been used to get \nvid\n from multiple Entity, the \nvariableName\n attribute can be used to get the associated \nvid\ns. (Example has been provided below)\n\n\n\n\nSample Configuration\n\n\n\n\nSingle Table\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\"tables\"\n:\n \n{\n\n    \n\"T_CLM_PY\"\n:\n \n{\n\n      \n\"queryName\"\n:\n \n\"claimPayment\"\n,\n\n      \n\"columns\"\n:\n \n[\n\n        \n\"b.N_PY_PERIODS\"\n\n      \n]\n\n    \n}\n\n  \n}\n\n\n\n\n\n\n\n\n\n\n\nMultiple Tables and Titan Query\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n\"tables\"\n:\n \n{\n\n    \n\"T_CLM_PY\"\n:\n \n{\n\n      \n\"queryName\"\n:\n \n\"claimPayment\"\n,\n\n      \n\"columns\"\n:\n \n[\n\n        \n\"b.PY_ADJUSTMENTS\"\n\n      \n]\n\n    \n},\n\n    \n\"T_DABL_PLN\"\n:\n \n{\n\n      \n\"queryName\"\n:\n \n\"planDetails\"\n,\n\n      \n\"columns\"\n:\n \n[\n\n        \n\"c.BEN_ADJ_AMT_MODE_CD\"\n\n      \n]\n\n    \n}\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\nMultiple Tables but one Titan Query\n\n\n\n\nGenerally we use \nselect\n to get all different Entities from one Titan Query.\n\n\nHere is an example of that\n\n\n\n\n1\n2\n3\n4\n5\n6\n...\n\n\n{\n\n    \n\"ops\"\n:\n \n\"select\"\n,\n\n    \n\"attr\"\n:\n \n\"AbsenceRequest,Member,ContactMethod,Customer\"\n\n\n}\n\n\n...\n\n\n\n\n\n\n\n\n\nNow, in order to get the HBase data from all the above entites we need to specify the \nvariableName\n ( Which is the same as values provided in the \nattr\n ) in the configuration.\n\n\nAs we can see below, the \nvariableName\n was defined for each Entity. \n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n\"tables\"\n:\n \n{\n\n    \n\"T_ABS_REQ\"\n:\n \n{\n\n      \n\"queryName\"\n:\n \n\"absenceRequest\"\n,\n\n      \n\"variableName\"\n:\n \n\"AbsenceRequest\"\n,\n\n      \n\"columns\"\n:\n \n[\n\n        \n\"b.ABS_NUM_CD\"\n,\n\n        \n\"c.ABS_REQ_STTS_CD\"\n,\n\n        \n\"b.ABS_NUM_CD\"\n,\n\n        \n\"c.CVR_CD\"\n,\n\n        \n\"c.ABS_STRT_DT\"\n,\n\n        \n\"c.ABS_REQ_TYPES\"\n,\n\n        \n\"c.CONT_INTMT_HIST_CD\"\n\n      \n]\n\n    \n},\n\n    \n\"T_GRP_MBR\"\n:\n \n{\n\n      \n\"queryName\"\n:\n \n\"absenceRequest\"\n,\n\n      \n\"variableName\"\n:\n \n\"Member\"\n,\n\n      \n\"columns\"\n:\n \n[\n\n        \n\"b.FRST_NM\"\n,\n\n        \n\"b.LST_NM\"\n,\n\n        \n\"b.MID_1_NM\"\n,\n\n        \n\"b.SFX_OF_NM\"\n\n      \n]\n\n    \n},\n\n    \n\"T_CNTCT_MTHD\"\n:\n \n{\n\n      \n\"queryName\"\n:\n \n\"absenceRequest\"\n,\n\n      \n\"variableName\"\n:\n \n\"ContactMethod\"\n,\n\n      \n\"columns\"\n:\n \n[\n\n        \n\"b.ADR_1_LN\"\n,\n\n        \n\"b.ADR_2_LN\"\n,\n\n        \n\"b.CITY_NM\"\n,\n\n        \n\"b.ST_CD\"\n,\n\n        \n\"e.ZIP_CD\"\n,\n\n        \n\"b.SRC_SYS_NM\"\n,\n\n        \n\"b.PERM_ADR_IND\"\n\n      \n]\n\n    \n},\n\n    \n\"T_GRP_CUST\"\n:\n \n{\n\n      \n\"queryName\"\n:\n \n\"absenceRequest\"\n,\n\n      \n\"variableName\"\n:\n \n\"Customer\"\n,\n\n      \n\"columns\"\n:\n \n[\n\n        \n\"b.CUST_NM\"\n\n      \n]\n\n    \n}\n\n\n}",
            "title": "HBase Data Load"
        },
        {
            "location": "/user-guide/hbase-load/index.html#hbase-data-load",
            "text": "Abstract  The Framework uses the HBase Data Load Configurations in order to load the data from HBase.    The Configuration need to be defined in the  tables  section.  queryName  : Needs to be specified to specific Titan Query, so that the  vid  will be used to fetch the data from HBase.   columns  :  List of the HBase column name with column family name.  variableName  : This is optional attribute. In case in the previous Titan Query, a  select  has been used to get  vid  from multiple Entity, the  variableName  attribute can be used to get the associated  vid s. (Example has been provided below)   Sample Configuration   Single Table  1\n2\n3\n4\n5\n6\n7\n8 \"tables\" :   { \n     \"T_CLM_PY\" :   { \n       \"queryName\" :   \"claimPayment\" , \n       \"columns\" :   [ \n         \"b.N_PY_PERIODS\" \n       ] \n     } \n   }      Multiple Tables and Titan Query   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14 \"tables\" :   { \n     \"T_CLM_PY\" :   { \n       \"queryName\" :   \"claimPayment\" , \n       \"columns\" :   [ \n         \"b.PY_ADJUSTMENTS\" \n       ] \n     }, \n     \"T_DABL_PLN\" :   { \n       \"queryName\" :   \"planDetails\" , \n       \"columns\" :   [ \n         \"c.BEN_ADJ_AMT_MODE_CD\" \n       ] \n     }  }      Multiple Tables but one Titan Query   Generally we use  select  to get all different Entities from one Titan Query.  Here is an example of that   1\n2\n3\n4\n5\n6 ...  { \n     \"ops\" :   \"select\" , \n     \"attr\" :   \"AbsenceRequest,Member,ContactMethod,Customer\"  }  ...     Now, in order to get the HBase data from all the above entites we need to specify the  variableName  ( Which is the same as values provided in the  attr  ) in the configuration.  As we can see below, the  variableName  was defined for each Entity.     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45 \"tables\" :   { \n     \"T_ABS_REQ\" :   { \n       \"queryName\" :   \"absenceRequest\" , \n       \"variableName\" :   \"AbsenceRequest\" , \n       \"columns\" :   [ \n         \"b.ABS_NUM_CD\" , \n         \"c.ABS_REQ_STTS_CD\" , \n         \"b.ABS_NUM_CD\" , \n         \"c.CVR_CD\" , \n         \"c.ABS_STRT_DT\" , \n         \"c.ABS_REQ_TYPES\" , \n         \"c.CONT_INTMT_HIST_CD\" \n       ] \n     }, \n     \"T_GRP_MBR\" :   { \n       \"queryName\" :   \"absenceRequest\" , \n       \"variableName\" :   \"Member\" , \n       \"columns\" :   [ \n         \"b.FRST_NM\" , \n         \"b.LST_NM\" , \n         \"b.MID_1_NM\" , \n         \"b.SFX_OF_NM\" \n       ] \n     }, \n     \"T_CNTCT_MTHD\" :   { \n       \"queryName\" :   \"absenceRequest\" , \n       \"variableName\" :   \"ContactMethod\" , \n       \"columns\" :   [ \n         \"b.ADR_1_LN\" , \n         \"b.ADR_2_LN\" , \n         \"b.CITY_NM\" , \n         \"b.ST_CD\" , \n         \"e.ZIP_CD\" , \n         \"b.SRC_SYS_NM\" , \n         \"b.PERM_ADR_IND\" \n       ] \n     }, \n     \"T_GRP_CUST\" :   { \n       \"queryName\" :   \"absenceRequest\" , \n       \"variableName\" :   \"Customer\" , \n       \"columns\" :   [ \n         \"b.CUST_NM\" \n       ] \n     }  }",
            "title": "HBase Data Load"
        },
        {
            "location": "/user-guide/json-response/index.html",
            "text": "REST Response Configuration\n\n\n\n\nAbstract\n\n\nThe Framework uses the response configurations in order to generate the response for Microservice.\n\n\n\n\nOverview\n\n\n\n\nThe \nresponse\n section needs to be added in the Framework Configuration.\n\n\nBased on the configuration defined the response JSON can be generated.\n\n\n\n\nFeatures Supported\n\n\n\n\nDifferent Types of JSON elements\u200b\n\n\nData Type\u200bs such as string, number etc\n\n\nCustom Array\u200bs (Find more details below)\n\n\nTransformations\u200b (lower case, trim etc)\n\n\nCustom Functions\u200b\n\n\nRules\u200b\n\n\nEnumeration*\n\n\nNo limitation on number of JSON attribute levels.\n\n\n\n\nBasic Structure\n\n\n\n\n\n\nBelow json configuration needed for creating one element.\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n{\n\n    \n\"response\"\n:\n \n[\n\n     \n{\n\n          \n\"field\"\n:\n \n\"item\"\n,\n\n          \n\"type\"\n:\n \n\"object\"\n,\n\n          \n\"children\"\n:\n \n[\n\n                \n{\n\n                  \n\"field\"\n:\n \n\"claimNumber\"\n,\n\n                  \n\"tableName\"\n:\n \n\"T_ABS_REQ\"\n,\n\n                  \n\"columnName\"\n:\n \n\"b.ABS_NUM_CD\"\n,\n\n                  \n\"type\"\n:\n \n\"generic\"\n,\n\n                  \n\"dtype\"\n:\n \n\"string\"\n\n                \n}\n\n          \n]\n\n     \n}]\n\n\n}\n\n\n\n\n\n\n\n\n\n\nIt will create a structure like below.\n\n1\n2\n3\n4\n5\n{\n\n    \n\"item\"\n:\n \n{\n\n        \n\"claimNumber\"\n \n:\n'\n1234\n'\n\n    \n}\n\n\n}\n\n\n\n\n\n\n\n\n\n\nAs you see, \n\n\n\n\nfield\n : is the name of the JSON element.\n\n\ntype\n  : is the type of JSON element.\n\n\ntableName,columnName\n : Source of the data\n\n\ndtype\n : Data Type of the JSON element\n\n\n\n\n\n\nlike above, there might be required and optional parameters for different scenario.\n\n\n\n\nGeneric Configurations\n\n\n\n\n\n\nJSON Elements\n\n\n\n\n\n\nThe \ntype\n attribute defines which JSON Element needs to be created. \n\n\n\n\n\n\n\n\nFeature\n\n\ntype=\n\n\nExample\n\n\nComments\n\n\n\n\n\n\n\n\n\n\nElement\u200b\n\n\ngeneric\n\n\n{ fname : 'john' }\n\n\n\n\n\n\n\n\nArray\u200b\n\n\narray\n\n\n { item: [] } \n\n\nNeed to set \ninjectTableName\n\n\n\n\n\n\nObject\u200b\n\n\nobject\n\n\n{ extension: { zip_code: 20548 }}\n\n\nNested JSON Element\n\n\n\n\n\n\nConstant\n\n\nconstant\n\n\n{ currency : 'USD' } \n\n\nConstant Value\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nData Types\n\n\n\n\n\n\nThe \ndtype\n attribute defines the data type of the element.\n\n\n\n\n\n\n\n\nFeature\n\n\ndtype=\n\n\nExample\n\n\nComments\n\n\n\n\n\n\n\n\n\n\nString\n\n\nstring\n\n\n{ fname : 'john' }\n\n\nDefault\n\n\n\n\n\n\nFloat\n\n\ndouble\n\n\n { amount : 25.45 } \n\n\nFloat Value\n\n\n\n\n\n\n\u200bNumeric\n\n\nnumber\n\n\n{ year : 2018 }\n\n\nInteger Value\n\n\n\n\n\n\nBoolean\n\n\nbool\n\n\n{ available : false } \n\n\nNULL or Empty = false\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nElement Types\n\n\nBasic Element\n\n\n\n\nThe following configuration will create a basic String element.\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n{\n\n  \n\"type\"\n:\n \n\"generic\"\n,\n\n  \n\"field\"\n:\n \n\"claim_number\"\n,\n\n  \n\"tableName\"\n:\n \n\"T_CLM_PY\"\n,\n\n  \n\"columnName\"\n:\n \n\"b.CLAIM_NUMBER\"\n,\n\n  \n\"dtype\"\n:\n \n\"string\"\n\n\n}\n\n\n\n\n\n\n\n\n\nDetails\n\n\ntype\n : \ngeneric\n\n\nfield\n : Name of the response field.\n\n\ntableName\n : Name of the key in the map object. This can be the name of the HBase table or also name of \ninjectTableName\n or custom name defined in Java Code.\n\n\ncolumnName\n : Name of the key present in the map retrieved using the \ntablename\n. Again this can be name of HBase column name, or Array Element name ( In case of Array)\n\n\ndtype\n : Can be any of the supported values. \n\n\n\n\n\n\n\n\nObject\u200b Element\n\n\n\n\nYou can create JSON Objects like below. \n\n\nThere are no limitation on the depth.\n\n\nSample REST Response\n    \n1\n2\n3\n\"extension\"\n:\n \n{\n\n  \n\"adjustmentFrequencyCode\"\n:\n \n\"4353\"\n\n\n}\n\n\n\n\n\n\n\n\nFramework configuration for the above response\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n{\n\n  \n\"type\"\n:\n \n\"object\"\n,\n\n  \n\"field\"\n:\n \n\"extension\"\n,\n\n  \n\"children\"\n:\n \n[\n\n    \n{\n\n      \n\"field\"\n:\n \n\"adjustmentFrequencyCode\"\n,\n\n      \n\"tableName\"\n:\n \n\"T_DABL_PLN\"\n,\n\n      \n\"columnName\"\n:\n \n\"b.BEN_ADJ_AMT_MODE_CD\"\n,\n\n      \n\"type\"\n:\n \n\"generic\"\n,\n\n      \n\"dtype\"\n:\n \n\"string\"\n\n    \n}\n\n  \n]\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\nDetails\n\n\n\n\ntype\n : \nobject\n\n\nOnly \ntype\n and \nfield\n need to be defined for JSON Objects.\n\n\nThe child elements needs to be inside \nchildren\n array.\n\n\nThere is no limitation on number of children.\n\n\nEach children can be of different types (e.g. Another Object, Array, Constant etc)\n\n\n\n\n\n\n\n\nMultilevel Example\nHere is an example of more than one level\\depth.\nJSON Response\n1\n2\n3\n4\n5\n\"extension\"\n:\n \n{\n\n      \n\"adjustmentAmount\"\n:\n \n{\n\n            \n\"amount\"\n:\n100.50\n\n      \n}\n\n\n}\n\n\n\n\n\n \nFramework Configuration\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n{\n\n  \n\"type\"\n:\n \n\"object\"\n,\n\n  \n\"field\"\n:\n \n\"extension\"\n,\n\n  \n\"children\"\n:\n \n[\n\n    \n{\n\n        \n\"type\"\n:\n \n\"generic\"\n,\n\n        \n\"field\"\n:\n \n\"adjustmentAmount\"\n,\n\n        \n\"children\"\n:\n \n[\n\n            \n{\n\n              \n\"field\"\n:\n \n\"amount\"\n,\n\n              \n\"tableName\"\n:\n \n\"T_DABL_PLN\"\n,\n\n              \n\"columnName\"\n:\n \n\"b.BEN_ADJ_AMT\"\n,\n\n              \n\"type\"\n:\n \n\"generic\"\n,\n\n              \n\"dtype\"\n:\n \n\"double\"\n\n            \n}\n\n        \n]\n\n    \n}\n\n  \n]\n\n\n}\n\n\n\n\n\n\nArray\u200b Element\n\n\n\n\n\n\nJSON Array can be generated by setting up following properties.\n\n\n\n\ntype\n : \narray\n\n\ntableName\n : Actual map key name.\n\n\ncolumnName\n : Table column name, this needs to be List/Map\n\n\ninjectTableName\n : Dummy table name which each child element needs to refer.\n\n\nchildren\n : List of all the children for each array element.\n\n\n\n\n\n\n\n\nConfiguration\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n{\n\n  \n\"type\"\n:\n \n\"array\"\n,\n\n  \n\"field\"\n:\n \n\"items\"\n,\n\n  \n\"tableName\"\n:\n \n\"CLAIM_PAYMENT\"\n,\n\n  \n\"columnName\"\n:\n \n\"OVER_PAYMENTS\"\n,\n\n  \n\"injectTableName\"\n:\n \n\"PAYMENTS\"\n,\n\n  \n\"children\"\n:\n \n[\n\n    \n{\n\n      \n\"type\"\n:\n \n\"generic\"\n,\n\n      \n\"field\"\n:\n \n\"number\"\n,\n\n      \n\"tableName\"\n:\n \n\"PAYMENTS\"\n,\n\n      \n\"columnName\"\n:\n \n\"NUMBER\"\n,\n\n      \n\"dtype\"\n:\n \n\"string\"\n\n    \n}\n\n  \n]\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\nAs we are seeing above, the \ncolumnName\n of the children is referring to the \ninjectTableName\n of the \narray\n element. The Framework will internally create a Map using the provided \ninjectTableName\n, which will be available to each array element.\n\n\n\n\n\n\nOutput\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\"items\"\n:\n \n[\n\n  \n{\n\n     \n\"number\"\n:\n\"34234234\"\n\n  \n},\n\n  \n{\n\n     \n\"number\"\n:\n\"465466654\"\n\n  \n}\n\n\n]\n\n\n\n\n\n\n\n\n\n\n\nConstant Element\n\n\n\n\nGenerally there is no specific Constant element in JSON, however whenever we are building a service we might have requirement to have constant values for specific fields.\n\n\nThe Framework supports this by setting \ntype\n as \nconstant\n\n\n\n\nConfiguration\n\n\n1\n2\n3\n4\n5\n6\n{\n\n  \n\"field\"\n:\n \n\"currencyCode\"\n,\n\n  \n\"type\"\n:\n \n\"constant\"\n,\n\n  \n\"dtype\"\n:\n \n\"string\"\n,\n\n  \n\"value\"\n:\n \n\"USD\"\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\nSample Output\n\n\n1\n2\n3\n  \n{\n\n     \n\"currencyCode\"\n:\n\"USD\"\n\n  \n}\n\n\n\n\n\n\n\n\n\n\n\nCustom Rules\n\n\n\n\n\n\nIn case there are custom rule which needs to be invoked in order to generate the response for any given entity, \n\n\n\n\ntype\n needs to be set as \ncustom\n\n\nmethodName\n needs to be provided which has the rule implementation.\n\n\n\n\n\n\n\n\nConfiguration\n    \n1\n2\n3\n4\n5\n{\n\n  \n\"type\"\n:\n \n\"custom\"\n,\n\n  \n\"field\"\n:\n \n\"self\"\n,\n\n  \n\"methodName\"\n:\n \n\"getOverpayments_Self\"\n\n\n}\n\n\n\n\n\n\n\n\nJava Code\n\n\nThere needs to be a Rule Class which should extend \nBaseServiceImpl\n\n\nThe \n<Name>ServiceImpl\n class can be used if its already extending the \nBaseServiceImpl\n.\n\n\nJust pass the \nthis\n object in this case to the \nresponse\n \n=\n \neosAPIFramework\n.\nresponseMetadataAdaptor\n.\ncreateMapping\n(\n \nmappings\n,\n \ndata\n,\n \nresponse\n,\n \nthis\n)\n method as the last parameter.\n\n\nOtherwise instantiate the class and pass that as the last parameter. \n\n\n\n\n\n\nAdd the configured method to the class.\n\n\nBelow is the implementation of the \nself\n custom method.\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\npublic\n \nString\n \ngetOverpayments_Self\n(\nHashMap\n<\nString\n,\n \nObject\n>\n \ndata\n)\n \n\n{\n\n    \nString\n \nstrReturnVal\n=\n\"\"\n;\n\n    \ntry\n \n{\n\n        \nstrReturnVal\n=\n\"https://\"\n\n            \n+\n \nprofile\n \n            \n+\n \n\".api.metlife.com/claimServices/api/v1/claims/\"\n \n            \n+\n \ndata\n.\nget\n(\n\"ClaimNumber\"\n)\n\n            \n+\n \n\"/overpayments/\"\n\n            \n+\n \n((\nMap\n)\ndata\n.\nget\n(\n\"PAYMENTS\"\n)).\nget\n(\n\"NUMBER\"\n);\n\n\n    \n}\ncatch\n(\nException\n \ne\n)\n \n{\n\n        \nLOGGER\n.\nerror\n(\n\"getOverpayments_Self()::\"\n+\ne\n.\ngetMessage\n(),\n \ne\n);\n\n    \n}\n\n    \nreturn\n \nstrReturnVal\n;\n\n\n}\n\n\n\n\n\n\nThe method must return \nString\n and it will get the entire \ndata\n Map as input. Hence in case you need any specific data it can be added to the \ndata\n map manually before calling \ncreateMapping\n  \n\n\n\n\n\n\n\n\nConcat Multiple Data Elements\n\n\n\n\nIn case a response field is a concatenation of more than one data element then following can be used to concat multiple elements.\n\n\n\n\nSet the following details\n\n\n\n\ntype\n : \nconcat\n\n\ncolumnName\n : List of columns which needs to be concatenated.\n\n\nseparator\n : Specify the seperator using which the elements will be concatenated.\n\n\n\n\n\n\n\n\nConfiguration\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n{\n\n  \n\"field\"\n:\n \n\"policyNumber\"\n,\n\n  \n\"tableName\"\n:\n \n\"account\"\n,\n\n  \n\"type\"\n:\n \n\"concat\"\n,\n\n  \n\"separator\"\n:\n \n\"-\"\n,\n\n  \n\"columnName\"\n:\n \n\"a.eno,a.gno\"\n,\n\n  \n\"dtype\"\n:\n \n\"string\"\n\n\n}\n\n\n\n\n\n\n\n\n\n\n\nSample Output\n\n\n1\n2\n3\n{\n\n  \n\"policyNumber\"\n:\n\"32343-32234324\"\n\n\n}",
            "title": "REST Response"
        },
        {
            "location": "/user-guide/json-response/index.html#rest-response-configuration",
            "text": "Abstract  The Framework uses the response configurations in order to generate the response for Microservice.",
            "title": "REST Response Configuration"
        },
        {
            "location": "/user-guide/json-response/index.html#overview",
            "text": "The  response  section needs to be added in the Framework Configuration.  Based on the configuration defined the response JSON can be generated.",
            "title": "Overview"
        },
        {
            "location": "/user-guide/json-response/index.html#features-supported",
            "text": "Different Types of JSON elements\u200b  Data Type\u200bs such as string, number etc  Custom Array\u200bs (Find more details below)  Transformations\u200b (lower case, trim etc)  Custom Functions\u200b  Rules\u200b  Enumeration*  No limitation on number of JSON attribute levels.",
            "title": "Features Supported"
        },
        {
            "location": "/user-guide/json-response/index.html#basic-structure",
            "text": "Below json configuration needed for creating one element.  1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16 { \n     \"response\" :   [ \n      { \n           \"field\" :   \"item\" , \n           \"type\" :   \"object\" , \n           \"children\" :   [ \n                 { \n                   \"field\" :   \"claimNumber\" , \n                   \"tableName\" :   \"T_ABS_REQ\" , \n                   \"columnName\" :   \"b.ABS_NUM_CD\" , \n                   \"type\" :   \"generic\" , \n                   \"dtype\" :   \"string\" \n                 } \n           ] \n      }]  }      It will create a structure like below. 1\n2\n3\n4\n5 { \n     \"item\" :   { \n         \"claimNumber\"   : ' 1234 ' \n     }  }      As you see,    field  : is the name of the JSON element.  type   : is the type of JSON element.  tableName,columnName  : Source of the data  dtype  : Data Type of the JSON element    like above, there might be required and optional parameters for different scenario.",
            "title": "Basic Structure"
        },
        {
            "location": "/user-guide/json-response/index.html#generic-configurations",
            "text": "JSON Elements    The  type  attribute defines which JSON Element needs to be created.      Feature  type=  Example  Comments      Element\u200b  generic  { fname : 'john' }     Array\u200b  array   { item: [] }   Need to set  injectTableName    Object\u200b  object  { extension: { zip_code: 20548 }}  Nested JSON Element    Constant  constant  { currency : 'USD' }   Constant Value         Data Types    The  dtype  attribute defines the data type of the element.     Feature  dtype=  Example  Comments      String  string  { fname : 'john' }  Default    Float  double   { amount : 25.45 }   Float Value    \u200bNumeric  number  { year : 2018 }  Integer Value    Boolean  bool  { available : false }   NULL or Empty = false",
            "title": "Generic Configurations"
        },
        {
            "location": "/user-guide/json-response/index.html#element-types",
            "text": "",
            "title": "Element Types"
        },
        {
            "location": "/user-guide/json-response/index.html#basic-element",
            "text": "The following configuration will create a basic String element.   1\n2\n3\n4\n5\n6\n7 { \n   \"type\" :   \"generic\" , \n   \"field\" :   \"claim_number\" , \n   \"tableName\" :   \"T_CLM_PY\" , \n   \"columnName\" :   \"b.CLAIM_NUMBER\" , \n   \"dtype\" :   \"string\"  }     Details  type  :  generic  field  : Name of the response field.  tableName  : Name of the key in the map object. This can be the name of the HBase table or also name of  injectTableName  or custom name defined in Java Code.  columnName  : Name of the key present in the map retrieved using the  tablename . Again this can be name of HBase column name, or Array Element name ( In case of Array)  dtype  : Can be any of the supported values.",
            "title": "Basic Element"
        },
        {
            "location": "/user-guide/json-response/index.html#object-element",
            "text": "You can create JSON Objects like below.   There are no limitation on the depth.  Sample REST Response\n     1\n2\n3 \"extension\" :   { \n   \"adjustmentFrequencyCode\" :   \"4353\"  }     Framework configuration for the above response   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13 { \n   \"type\" :   \"object\" , \n   \"field\" :   \"extension\" , \n   \"children\" :   [ \n     { \n       \"field\" :   \"adjustmentFrequencyCode\" , \n       \"tableName\" :   \"T_DABL_PLN\" , \n       \"columnName\" :   \"b.BEN_ADJ_AMT_MODE_CD\" , \n       \"type\" :   \"generic\" , \n       \"dtype\" :   \"string\" \n     } \n   ]  }      Details   type  :  object  Only  type  and  field  need to be defined for JSON Objects.  The child elements needs to be inside  children  array.  There is no limitation on number of children.  Each children can be of different types (e.g. Another Object, Array, Constant etc)     Multilevel Example Here is an example of more than one level\\depth. JSON Response 1\n2\n3\n4\n5 \"extension\" :   { \n       \"adjustmentAmount\" :   { \n             \"amount\" : 100.50 \n       }  }   \n  Framework Configuration  1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19 { \n   \"type\" :   \"object\" , \n   \"field\" :   \"extension\" , \n   \"children\" :   [ \n     { \n         \"type\" :   \"generic\" , \n         \"field\" :   \"adjustmentAmount\" , \n         \"children\" :   [ \n             { \n               \"field\" :   \"amount\" , \n               \"tableName\" :   \"T_DABL_PLN\" , \n               \"columnName\" :   \"b.BEN_ADJ_AMT\" , \n               \"type\" :   \"generic\" , \n               \"dtype\" :   \"double\" \n             } \n         ] \n     } \n   ]  }",
            "title": "Object\u200b Element"
        },
        {
            "location": "/user-guide/json-response/index.html#array-element",
            "text": "JSON Array can be generated by setting up following properties.   type  :  array  tableName  : Actual map key name.  columnName  : Table column name, this needs to be List/Map  injectTableName  : Dummy table name which each child element needs to refer.  children  : List of all the children for each array element.     Configuration   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16 { \n   \"type\" :   \"array\" , \n   \"field\" :   \"items\" , \n   \"tableName\" :   \"CLAIM_PAYMENT\" , \n   \"columnName\" :   \"OVER_PAYMENTS\" , \n   \"injectTableName\" :   \"PAYMENTS\" , \n   \"children\" :   [ \n     { \n       \"type\" :   \"generic\" , \n       \"field\" :   \"number\" , \n       \"tableName\" :   \"PAYMENTS\" , \n       \"columnName\" :   \"NUMBER\" , \n       \"dtype\" :   \"string\" \n     } \n   ]  }      As we are seeing above, the  columnName  of the children is referring to the  injectTableName  of the  array  element. The Framework will internally create a Map using the provided  injectTableName , which will be available to each array element.    Output  1\n2\n3\n4\n5\n6\n7\n8 \"items\" :   [ \n   { \n      \"number\" : \"34234234\" \n   }, \n   { \n      \"number\" : \"465466654\" \n   }  ]",
            "title": "Array\u200b Element"
        },
        {
            "location": "/user-guide/json-response/index.html#constant-element",
            "text": "Generally there is no specific Constant element in JSON, however whenever we are building a service we might have requirement to have constant values for specific fields.  The Framework supports this by setting  type  as  constant   Configuration  1\n2\n3\n4\n5\n6 { \n   \"field\" :   \"currencyCode\" , \n   \"type\" :   \"constant\" , \n   \"dtype\" :   \"string\" , \n   \"value\" :   \"USD\"  }      Sample Output  1\n2\n3    { \n      \"currencyCode\" : \"USD\" \n   }",
            "title": "Constant Element"
        },
        {
            "location": "/user-guide/json-response/index.html#custom-rules",
            "text": "In case there are custom rule which needs to be invoked in order to generate the response for any given entity,    type  needs to be set as  custom  methodName  needs to be provided which has the rule implementation.     Configuration\n     1\n2\n3\n4\n5 { \n   \"type\" :   \"custom\" , \n   \"field\" :   \"self\" , \n   \"methodName\" :   \"getOverpayments_Self\"  }     Java Code  There needs to be a Rule Class which should extend  BaseServiceImpl  The  <Name>ServiceImpl  class can be used if its already extending the  BaseServiceImpl .  Just pass the  this  object in this case to the  response   =   eosAPIFramework . responseMetadataAdaptor . createMapping (   mappings ,   data ,   response ,   this )  method as the last parameter.  Otherwise instantiate the class and pass that as the last parameter.     Add the configured method to the class.  Below is the implementation of the  self  custom method.  1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16 public   String   getOverpayments_Self ( HashMap < String ,   Object >   data )   { \n     String   strReturnVal = \"\" ; \n     try   { \n         strReturnVal = \"https://\" \n             +   profile  \n             +   \".api.metlife.com/claimServices/api/v1/claims/\"  \n             +   data . get ( \"ClaimNumber\" ) \n             +   \"/overpayments/\" \n             +   (( Map ) data . get ( \"PAYMENTS\" )). get ( \"NUMBER\" ); \n\n     } catch ( Exception   e )   { \n         LOGGER . error ( \"getOverpayments_Self()::\" + e . getMessage (),   e ); \n     } \n     return   strReturnVal ;  }    The method must return  String  and it will get the entire  data  Map as input. Hence in case you need any specific data it can be added to the  data  map manually before calling  createMapping",
            "title": "Custom Rules"
        },
        {
            "location": "/user-guide/json-response/index.html#concat-multiple-data-elements",
            "text": "In case a response field is a concatenation of more than one data element then following can be used to concat multiple elements.   Set the following details   type  :  concat  columnName  : List of columns which needs to be concatenated.  separator  : Specify the seperator using which the elements will be concatenated.     Configuration  1\n2\n3\n4\n5\n6\n7\n8 { \n   \"field\" :   \"policyNumber\" , \n   \"tableName\" :   \"account\" , \n   \"type\" :   \"concat\" , \n   \"separator\" :   \"-\" , \n   \"columnName\" :   \"a.eno,a.gno\" , \n   \"dtype\" :   \"string\"  }      Sample Output  1\n2\n3 { \n   \"policyNumber\" : \"32343-32234324\"  }",
            "title": "Concat Multiple Data Elements"
        },
        {
            "location": "/about/about/index.html",
            "text": "About",
            "title": "About"
        },
        {
            "location": "/about/about/index.html#about",
            "text": "",
            "title": "About"
        },
        {
            "location": "/about/release-notes/index.html",
            "text": "Upcoming Release\n\n\n\n\n Request Validation \n\n\n TBD\n\n\n\n\n\n\n Titan Query Adapter \n\n\n Index Query\n\n\n Single entity\n\n\n Multiple entity\n\n\n\n\n\n\n\n\n\n\n Code Refactoring\n\n\n Config generation using Mapping doc\n\n\n\n\n03.12.2018\n\n\n\n\n Updated JSON Response Component \n\n\n Added \ncustom_element_from_map\n\n\n\n\n\n\n Created Documentations\n\n\n\n\n03.05.2018\n\n\n\n\n Added initial JSON Response Component  \n\n\n Upgrade version + package\n\n\n\n\n03.01.2018\n\n\n\n\n Initialize Project\n\n\n Initialize github repository",
            "title": "Release Notes"
        },
        {
            "location": "/help/markdown/index.html",
            "text": "Markdown Wiki\n\n\nHeaders\n\n\n1\n2\n3\n4\n5\n6\n# H1\n## H2\n### H3\n#### H4\n##### H5\n###### H6\n\n\n\n\n\n\nEmphasis\n\n\n1\n2\n3\n4\n5\n6\n7\nEmphasis, aka italics, with *asterisks* or _underscores_.\n\nStrong emphasis, aka bold, with **asterisks** or __underscores__.\n\nCombined emphasis with **asterisks and _underscores_**.\n\nStrikethrough uses two tildes. ~~Scratch this.~~\n\n\n\n\n\n\nEmphasis, aka italics, with \nasterisks\n or \nunderscores\n.\n\n\nStrong emphasis, aka bold, with \nasterisks\n or \nunderscores\n.\n\n\nCombined emphasis with \nasterisks and \nunderscores\n.\n\n\nStrikethrough uses two tildes. \nScratch this.\n\n\nLists\n\n\n(In this example, leading and trailing spaces are shown with with dots: \u22c5)\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n1. First ordered list item\n2. Another item\n\u22c5\u22c5* Unordered sub-list. \n1. Actual numbers don't matter, just that it's a number\n\u22c5\u22c51. Ordered sub-list\n4. And another item.\n\n\u22c5\u22c5\u22c5You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we'll use three here to also align the raw Markdown).\n\n\u22c5\u22c5\u22c5To have a line break without a paragraph, you will need to use two trailing spaces.\u22c5\u22c5\n\u22c5\u22c5\u22c5Note that this line is separate, but within the same paragraph.\u22c5\u22c5\n\u22c5\u22c5\u22c5(This is contrary to the typical GFM line break behaviour, where trailing spaces are not required.)\n\n* Unordered list can use asterisks\n- Or minuses\n+ Or pluses\n\n\n\n\n\n\n\n\nFirst ordered list item\n\n\nAnother item\n\n\nUnordered sub-list. \n\n\nActual numbers don't matter, just that it's a number\n\n\nOrdered sub-list\n\n\nAnd another item.\n\n\n\n\nYou can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we'll use three here to also align the raw Markdown).\n\n\nTo have a line break without a paragraph, you will need to use two trailing spaces.\n\n   Note that this line is separate, but within the same paragraph.\n\n   (This is contrary to the typical GFM line break behaviour, where trailing spaces are not required.)\n\n\n\n\nUnordered list can use asterisks\n\n\nOr minuses\n\n\nOr pluses\n\n\n\n\nLinks\n\n\nThere are two ways to create links.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n[I'm an inline-style link](https://www.google.com)\n\n[I'm an inline-style link with title](https://www.google.com \"Google's Homepage\")\n\n[I'm a reference-style link][Arbitrary case-insensitive reference text]\n\n[I'm a relative reference to a repository file](../blob/master/LICENSE)\n\n[You can use numbers for reference-style link definitions][1]\n\nOr leave it empty and use the [link text itself].\n\nURLs and URLs in angle brackets will automatically get turned into links. \nhttp://www.example.com or <http://www.example.com> and sometimes \nexample.com (but not on Github, for example).\n\nSome text to show that the reference links can follow later.\n\n[arbitrary case-insensitive reference text]: https://www.mozilla.org\n[1]: http://slashdot.org\n[link text itself]: http://www.reddit.com\n\n\n\n\n\n\nI'm an inline-style link\n\n\nI'm an inline-style link with title\n\n\nI'm a reference-style link\n\n\nI'm a relative reference to a repository file\n\n\nYou can use numbers for reference-style link definitions\n\n\nOr leave it empty and use the \nlink text itself\n.\n\n\nURLs and URLs in angle brackets will automatically get turned into links. \n\nhttp://www.example.com\n or \nhttp://www.example.com\n and sometimes \nexample.com (but not on Github, for example).\n\n\nSome text to show that the reference links can follow later.\n\n\nImages\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\nHere\n'\ns\n \nour\n \nlogo\n \n(\nhover\n \nto\n \nsee\n \nthe\n \ntitle\n \ntext\n)\n:\n\n\n\nInline\n-\nstyle\n:\n \n\n!\n[\nalt\n \ntext\n](\nimg\n/\nicon48\n.\npng\n \n\"Logo Title Text 1\"\n)\n\n\n\nReference\n-\nstyle\n:\n \n\n!\n[\nalt\n \ntext\n][\nlogo\n]\n\n\n\n[\nlogo\n]\n:\n \nimg\n/\nicon48\n.\npng\n \n\"Logo Title Text 2\"\n\n\n\n\n\n\n\nHere's our logo (hover to see the title text):\n\n\nInline-style: \n\n\n\nReference-style: \n\n\n\nCode and Syntax Highlighting\n\n\nCode blocks are part of the Markdown spec, but syntax highlighting isn't. However, many renderers -- like Github's and \nMarkdown Here\n -- support syntax highlighting. Which languages are supported and how those language names should be written will vary from renderer to renderer. \nMarkdown Here\n supports highlighting for dozens of languages (and not-really-languages, like diffs and HTTP headers); to see the complete list, and how to write the language names, see the \nhighlight.js demo page\n.\n\n\n1\nInline `code` has `back-ticks around` it.\n\n\n\n\n\n\nInline \ncode\n has \nback-ticks around\n it.\n\n\nBlocks of code are either fenced by lines with three back-ticks \n```\n, or are indented with four spaces. I recommend only using the fenced code blocks -- they're easier and only they support syntax highlighting.\n\n\n```javascript\nvar s = \"JavaScript syntax highlighting\";\nalert(s);\n\u0002wzxhzdk:6\u0003\n\n\u0002wzxhzdk:7\u0003\n\n\n\n\n1\n2\nvar\n \ns\n \n=\n \n\"JavaScript syntax highlighting\"\n;\n\n\nalert\n(\ns\n);\n\n\n\n\n\n\n\n1\n2\ns\n \n=\n \n\"Python syntax highlighting\"\n\n\nprint\n \ns\n\n\n\n\n\n\n\n1\n2\nNo language indicated, so no syntax highlighting in Markdown Here (varies on Github). \nBut let's throw in a \n<b>\ntag\n</b>\n.\n\n\n\n\n\n\nTables\n\n\nTables aren't part of the core Markdown spec, but they are part of GFM and \nMarkdown Here\n supports them. They are an easy way of adding tables to your email -- a task that would otherwise require copy-pasting from another application.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\nColons\n \ncan\n \nbe\n \nused\n \nto\n \nalign\n \ncolumns\n.\n\n\n\n|\n \nTables\n        \n|\n \nAre\n           \n|\n \nCool\n  \n|\n\n\n|\n \n-------------\n \n|:-\n------------:\n|\n \n-----:\n|\n\n\n|\n \ncol\n \n3\n \nis\n      \n|\n \nright\n-\naligned\n \n|\n \n$\n1600\n \n|\n\n\n|\n \ncol\n \n2\n \nis\n      \n|\n \ncentered\n      \n|\n   \n$\n12\n \n|\n\n\n|\n \nzebra\n \nstripes\n \n|\n \nare\n \nneat\n      \n|\n    \n$\n1\n \n|\n\n\n\nThere\n \nmust\n \nbe\n \nat\n \nleast\n \n3\n \ndashes\n \nseparating\n \neach\n \nheader\n \ncell\n.\n\n\nThe\n \nouter\n \npipes\n \n(|)\n \nare\n \noptional\n,\n \nand\n \nyou\n \ndon\n'\nt\n \nneed\n \nto\n \nmake\n \nthe\n \n\nraw\n \nMarkdown\n \nline\n \nup\n \nprettily\n.\n \nYou\n \ncan\n \nalso\n \nuse\n \ninline\n \nMarkdown\n.\n\n\n\nMarkdown\n \n|\n \nLess\n \n|\n \nPretty\n\n\n---\n \n|\n \n---\n \n|\n \n---\n\n\n*\nStill\n*\n \n|\n \n`\nrenders\n`\n \n|\n \n**nicely**\n\n\n1\n \n|\n \n2\n \n|\n \n3\n\n\n\n\n\n\n\nColons can be used to align columns.\n\n\n\n\n\n\n\n\nTables\n\n\nAre\n\n\nCool\n\n\n\n\n\n\n\n\n\n\ncol 3 is\n\n\nright-aligned\n\n\n$1600\n\n\n\n\n\n\ncol 2 is\n\n\ncentered\n\n\n$12\n\n\n\n\n\n\nzebra stripes\n\n\nare neat\n\n\n$1\n\n\n\n\n\n\n\n\nThere must be at least 3 dashes separating each header cell. The outer pipes (|) are optional, and you don't need to make the raw Markdown line up prettily. You can also use inline Markdown.\n\n\n\n\n\n\n\n\nMarkdown\n\n\nLess\n\n\nPretty\n\n\n\n\n\n\n\n\n\n\nStill\n\n\nrenders\n\n\nnicely\n\n\n\n\n\n\n1\n\n\n2\n\n\n3\n\n\n\n\n\n\n\n\nBlockquotes\n\n\n1\n2\n3\n4\n5\n6\n> Blockquotes are very handy in email to emulate reply text.\n> This line is part of the same quote.\n\nQuote break.\n\n> This is a very long line that will still be quoted properly when it wraps. Oh boy let's keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can *put* **Markdown** into a blockquote. \n\n\n\n\n\n\n\n\nBlockquotes are very handy in email to emulate reply text.\nThis line is part of the same quote.\n\n\n\n\nQuote break.\n\n\n\n\nThis is a very long line that will still be quoted properly when it wraps. Oh boy let's keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can \nput\n \nMarkdown\n into a blockquote. \n\n\n\n\nInline HTML\n\n\nYou can also use raw HTML in your Markdown, and it'll mostly work pretty well. \n\n\n1\n2\n3\n4\n5\n6\n7\n<dl>\n\n  \n<dt>\nDefinition list\n</dt>\n\n  \n<dd>\nIs something people use sometimes.\n</dd>\n\n\n  \n<dt>\nMarkdown in HTML\n</dt>\n\n  \n<dd>\nDoes *not* work **very** well. Use HTML \n<em>\ntags\n</em>\n.\n</dd>\n\n\n</dl>\n\n\n\n\n\n\n\n\n  \nDefinition list\n\n  \nIs something people use sometimes.\n\n\n  \nMarkdown in HTML\n\n  \nDoes *not* work **very** well. Use HTML \ntags\n.\n\n\n\n\n\nHorizontal Rule\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\nThree or more...\n\n---\n\nHyphens\n\n***\n\nAsterisks\n\n___\n\nUnderscores\n\n\n\n\n\n\nThree or more...\n\n\n\n\nHyphens\n\n\n\n\nAsterisks\n\n\n\n\nUnderscores\n\n\nLine Breaks\n\n\nMy basic recommendation for learning how line breaks work is to experiment and discover -- hit <Enter> once (i.e., insert one newline), then hit it twice (i.e., insert two newlines), see what happens. You'll soon learn to get what you want. \"Markdown Toggle\" is your friend. \n\n\nHere are some things to try out:\n\n\n1\n2\n3\n4\n5\n6\nHere's a line for us to start with.\n\nThis line is separated from the one above by two newlines, so it will be a *separate paragraph*.\n\nThis line is also a separate paragraph, but...\nThis line is only separated by a single newline, so it's a separate line in the *same paragraph*.\n\n\n\n\n\n\nHere's a line for us to start with.\n\n\nThis line is separated from the one above by two newlines, so it will be a \nseparate paragraph\n.\n\n\nThis line is also begins a separate paragraph, but...\n\nThis line is only separated by a single newline, so it's a separate line in the \nsame paragraph\n.",
            "title": "Markdown"
        },
        {
            "location": "/help/markdown/index.html#markdown-wiki",
            "text": "",
            "title": "Markdown Wiki"
        },
        {
            "location": "/help/markdown/index.html#headers",
            "text": "1\n2\n3\n4\n5\n6 # H1\n## H2\n### H3\n#### H4\n##### H5\n###### H6",
            "title": "Headers"
        },
        {
            "location": "/help/markdown/index.html#emphasis",
            "text": "1\n2\n3\n4\n5\n6\n7 Emphasis, aka italics, with *asterisks* or _underscores_.\n\nStrong emphasis, aka bold, with **asterisks** or __underscores__.\n\nCombined emphasis with **asterisks and _underscores_**.\n\nStrikethrough uses two tildes. ~~Scratch this.~~   Emphasis, aka italics, with  asterisks  or  underscores .  Strong emphasis, aka bold, with  asterisks  or  underscores .  Combined emphasis with  asterisks and  underscores .  Strikethrough uses two tildes.  Scratch this.",
            "title": "Emphasis"
        },
        {
            "location": "/help/markdown/index.html#lists",
            "text": "(In this example, leading and trailing spaces are shown with with dots: \u22c5)   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16 1. First ordered list item\n2. Another item\n\u22c5\u22c5* Unordered sub-list. \n1. Actual numbers don't matter, just that it's a number\n\u22c5\u22c51. Ordered sub-list\n4. And another item.\n\n\u22c5\u22c5\u22c5You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we'll use three here to also align the raw Markdown).\n\n\u22c5\u22c5\u22c5To have a line break without a paragraph, you will need to use two trailing spaces.\u22c5\u22c5\n\u22c5\u22c5\u22c5Note that this line is separate, but within the same paragraph.\u22c5\u22c5\n\u22c5\u22c5\u22c5(This is contrary to the typical GFM line break behaviour, where trailing spaces are not required.)\n\n* Unordered list can use asterisks\n- Or minuses\n+ Or pluses    First ordered list item  Another item  Unordered sub-list.   Actual numbers don't matter, just that it's a number  Ordered sub-list  And another item.   You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we'll use three here to also align the raw Markdown).  To have a line break without a paragraph, you will need to use two trailing spaces. \n   Note that this line is separate, but within the same paragraph. \n   (This is contrary to the typical GFM line break behaviour, where trailing spaces are not required.)   Unordered list can use asterisks  Or minuses  Or pluses",
            "title": "Lists"
        },
        {
            "location": "/help/markdown/index.html#links",
            "text": "There are two ways to create links.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21 [I'm an inline-style link](https://www.google.com)\n\n[I'm an inline-style link with title](https://www.google.com \"Google's Homepage\")\n\n[I'm a reference-style link][Arbitrary case-insensitive reference text]\n\n[I'm a relative reference to a repository file](../blob/master/LICENSE)\n\n[You can use numbers for reference-style link definitions][1]\n\nOr leave it empty and use the [link text itself].\n\nURLs and URLs in angle brackets will automatically get turned into links. \nhttp://www.example.com or <http://www.example.com> and sometimes \nexample.com (but not on Github, for example).\n\nSome text to show that the reference links can follow later.\n\n[arbitrary case-insensitive reference text]: https://www.mozilla.org\n[1]: http://slashdot.org\n[link text itself]: http://www.reddit.com   I'm an inline-style link  I'm an inline-style link with title  I'm a reference-style link  I'm a relative reference to a repository file  You can use numbers for reference-style link definitions  Or leave it empty and use the  link text itself .  URLs and URLs in angle brackets will automatically get turned into links.  http://www.example.com  or  http://www.example.com  and sometimes \nexample.com (but not on Github, for example).  Some text to show that the reference links can follow later.",
            "title": "Links"
        },
        {
            "location": "/help/markdown/index.html#images",
            "text": "1\n2\n3\n4\n5\n6\n7\n8\n9 Here ' s   our   logo   ( hover   to   see   the   title   text ) :  Inline - style :   ! [ alt   text ]( img / icon48 . png   \"Logo Title Text 1\" )  Reference - style :   ! [ alt   text ][ logo ]  [ logo ] :   img / icon48 . png   \"Logo Title Text 2\"    Here's our logo (hover to see the title text):  Inline-style:   Reference-style:",
            "title": "Images"
        },
        {
            "location": "/help/markdown/index.html#code-and-syntax-highlighting",
            "text": "Code blocks are part of the Markdown spec, but syntax highlighting isn't. However, many renderers -- like Github's and  Markdown Here  -- support syntax highlighting. Which languages are supported and how those language names should be written will vary from renderer to renderer.  Markdown Here  supports highlighting for dozens of languages (and not-really-languages, like diffs and HTTP headers); to see the complete list, and how to write the language names, see the  highlight.js demo page .  1 Inline `code` has `back-ticks around` it.   Inline  code  has  back-ticks around  it.  Blocks of code are either fenced by lines with three back-ticks  ``` , or are indented with four spaces. I recommend only using the fenced code blocks -- they're easier and only they support syntax highlighting.  ```javascript\nvar s = \"JavaScript syntax highlighting\";\nalert(s);\n\u0002wzxhzdk:6\u0003\n\n\u0002wzxhzdk:7\u0003  1\n2 var   s   =   \"JavaScript syntax highlighting\" ;  alert ( s );    1\n2 s   =   \"Python syntax highlighting\"  print   s    1\n2 No language indicated, so no syntax highlighting in Markdown Here (varies on Github). \nBut let's throw in a  <b> tag </b> .",
            "title": "Code and Syntax Highlighting"
        },
        {
            "location": "/help/markdown/index.html#tables",
            "text": "Tables aren't part of the core Markdown spec, but they are part of GFM and  Markdown Here  supports them. They are an easy way of adding tables to your email -- a task that would otherwise require copy-pasting from another application.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16 Colons   can   be   used   to   align   columns .  |   Tables          |   Are             |   Cool    |  |   -------------   |:- ------------: |   -----: |  |   col   3   is        |   right - aligned   |   $ 1600   |  |   col   2   is        |   centered        |     $ 12   |  |   zebra   stripes   |   are   neat        |      $ 1   |  There   must   be   at   least   3   dashes   separating   each   header   cell .  The   outer   pipes   (|)   are   optional ,   and   you   don ' t   need   to   make   the   raw   Markdown   line   up   prettily .   You   can   also   use   inline   Markdown .  Markdown   |   Less   |   Pretty  ---   |   ---   |   ---  * Still *   |   ` renders `   |   **nicely**  1   |   2   |   3    Colons can be used to align columns.     Tables  Are  Cool      col 3 is  right-aligned  $1600    col 2 is  centered  $12    zebra stripes  are neat  $1     There must be at least 3 dashes separating each header cell. The outer pipes (|) are optional, and you don't need to make the raw Markdown line up prettily. You can also use inline Markdown.     Markdown  Less  Pretty      Still  renders  nicely    1  2  3",
            "title": "Tables"
        },
        {
            "location": "/help/markdown/index.html#blockquotes",
            "text": "1\n2\n3\n4\n5\n6 > Blockquotes are very handy in email to emulate reply text.\n> This line is part of the same quote.\n\nQuote break.\n\n> This is a very long line that will still be quoted properly when it wraps. Oh boy let's keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can *put* **Markdown** into a blockquote.     Blockquotes are very handy in email to emulate reply text.\nThis line is part of the same quote.   Quote break.   This is a very long line that will still be quoted properly when it wraps. Oh boy let's keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can  put   Markdown  into a blockquote.",
            "title": "Blockquotes"
        },
        {
            "location": "/help/markdown/index.html#inline-html",
            "text": "You can also use raw HTML in your Markdown, and it'll mostly work pretty well.   1\n2\n3\n4\n5\n6\n7 <dl> \n   <dt> Definition list </dt> \n   <dd> Is something people use sometimes. </dd> \n\n   <dt> Markdown in HTML </dt> \n   <dd> Does *not* work **very** well. Use HTML  <em> tags </em> . </dd>  </dl>    \n   Definition list \n   Is something people use sometimes. \n\n   Markdown in HTML \n   Does *not* work **very** well. Use HTML  tags .",
            "title": "Inline HTML"
        },
        {
            "location": "/help/markdown/index.html#horizontal-rule",
            "text": "1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13 Three or more...\n\n---\n\nHyphens\n\n***\n\nAsterisks\n\n___\n\nUnderscores   Three or more...   Hyphens   Asterisks   Underscores",
            "title": "Horizontal Rule"
        },
        {
            "location": "/help/markdown/index.html#line-breaks",
            "text": "My basic recommendation for learning how line breaks work is to experiment and discover -- hit <Enter> once (i.e., insert one newline), then hit it twice (i.e., insert two newlines), see what happens. You'll soon learn to get what you want. \"Markdown Toggle\" is your friend.   Here are some things to try out:  1\n2\n3\n4\n5\n6 Here's a line for us to start with.\n\nThis line is separated from the one above by two newlines, so it will be a *separate paragraph*.\n\nThis line is also a separate paragraph, but...\nThis line is only separated by a single newline, so it's a separate line in the *same paragraph*.   Here's a line for us to start with.  This line is separated from the one above by two newlines, so it will be a  separate paragraph .  This line is also begins a separate paragraph, but... \nThis line is only separated by a single newline, so it's a separate line in the  same paragraph .",
            "title": "Line Breaks"
        },
        {
            "location": "/help/block-style/index.html",
            "text": "Block-styled content\n\n\nUsage\n\n\nBlocks follow a simple syntax: every block is started with \n!!!\n,\nfollowed by a single keyword which is used as the \ntype qualifier\n of the\nblock. The content of the block then follows on the next line, indented by\nfour spaces.\n\n\nExample:\n\n\n1\n2\n3\n4\n!!! note\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\n    nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\n    massa, nec semper lorem quam in massa.\n\n\n\n\n\n\nResult:\n\n\n\n\nNote\n\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\nnulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\nmassa, nec semper lorem quam in massa.\n\n\n\n\nChanging the title\n\n\nBy default, the block title will equal the type qualifier in titlecase. However,\nit can easily be changed by adding a quoted string after the type qualifier.\n\n\nExample:\n\n\n1\n2\n3\n4\n!!! note \"Phasellus posuere in sem ut cursus\"\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\n    nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\n    massa, nec semper lorem quam in massa.\n\n\n\n\n\n\nResult:\n\n\n\n\nPhasellus posuere in sem ut cursus\n\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\nnulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\nmassa, nec semper lorem quam in massa.\n\n\n\n\nRemoving the title\n\n\nSimilar to setting a \ncustom title\n, the icon and title can be omitted by\nproviding an empty string after the type qualifier:\n\n\nExample:\n\n\n1\n2\n3\n4\n!!! note \"\"\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\n    nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\n    massa, nec semper lorem quam in massa.\n\n\n\n\n\n\nResult:\n\n\n\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\nnulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\nmassa, nec semper lorem quam in massa.\n\n\n\n\nEmbedded code blocks\n\n\nBlocks can contain all kinds of text content, including headlines, lists,\nparagraphs and other blocks \u2013 except code blocks, because the parser from the\nstandard Markdown library does not account for those.\n\n\nHowever, the \nPyMdown Extensions\n package adds an extension called\n\nSuperFences\n, which makes it possible to nest code blocks within other\nblocks.\n\n\nExample:\n\n\n\n\nNote\n\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\nnulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\nmassa, nec semper lorem quam in massa.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\nSELECT\n\n  \nEmployees\n.\nEmployeeID\n,\n\n  \nEmployees\n.\nName\n,\n\n  \nEmployees\n.\nSalary\n,\n\n  \nManager\n.\nName\n \nAS\n \nManager\n\n\nFROM\n\n  \nEmployees\n\n\nLEFT\n \nJOIN\n\n  \nEmployees\n \nAS\n \nManager\n\n\nON\n\n  \nEmployees\n.\nManagerID\n \n=\n \nManager\n.\nEmployeeID\n\n\nWHERE\n\n  \nEmployees\n.\nEmployeeID\n \n=\n \n'087652'\n;\n\n\n\n\n\n\n\nNunc eu odio eleifend, blandit leo a, volutpat sapien. Phasellus posuere in\nsem ut cursus. Nullam sit amet tincidunt ipsum, sit amet elementum turpis.\nEtiam ipsum quam, mattis in purus vitae, lacinia fermentum enim.\n\n\n\n\nCollapsible blocks\n\n\nThe \nDetails\n extension which is also part of the \nPyMdown Extensions\n\npackage adds support for rendering collapsible blocks. This is\nuseful for FAQs or content that is of secondary nature.\n\n\nExample:\n\n\n1\n2\n3\n4\n??? note \"Phasellus posuere in sem ut cursus\"\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\n    nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\n    massa, nec semper lorem quam in massa.\n\n\n\n\n\n\nResult:\n\n\nPhasellus posuere in sem ut cursus\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\nnulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\nmassa, nec semper lorem quam in massa.\nBy adding a \n+\n sign directly after the start marker, blocks can be rendered\nopen by default.\n\n\nTypes\n\n\nSupports user-defined type qualifiers which may influence the style\nof the inserted block. Following is a list of type qualifiers provided by the\nMaterial theme, whereas the default type, and thus fallback for unknown type\nqualifiers, is \nnote\n.\n\n\nNote\n\n\nExample:\n\n\n1\n2\n3\n4\n!!! note\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\n    nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\n    massa, nec semper lorem quam in massa.\n\n\n\n\n\n\nResult:\n\n\n\n\nNote\n\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\nnulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\nmassa, nec semper lorem quam in massa.\n\n\n\n\nQualifiers:\n\n\n\n\nnote\n\n\nseealso\n\n\n\n\nAbstract\n\n\nExample:\n\n\n1\n2\n3\n4\n!!! abstract\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\n    nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\n    massa, nec semper lorem quam in massa.\n\n\n\n\n\n\nResult:\n\n\n\n\nAbstract\n\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\nnulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\nmassa, nec semper lorem quam in massa.\n\n\n\n\nQualifiers:\n\n\n\n\nabstract\n\n\nsummary\n\n\ntldr\n\n\n\n\nInfo\n\n\nExample:\n\n\n1\n2\n3\n4\n!!! info\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\n    nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\n    massa, nec semper lorem quam in massa.\n\n\n\n\n\n\nResult:\n\n\n\n\nInfo\n\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\nnulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\nmassa, nec semper lorem quam in massa.\n\n\n\n\nQualifiers:\n\n\n\n\ninfo\n\n\ntodo\n\n\n\n\nTip\n\n\nExample:\n\n\n1\n2\n3\n4\n!!! tip\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\n    nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\n    massa, nec semper lorem quam in massa.\n\n\n\n\n\n\nResult:\n\n\n\n\nTip\n\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\nnulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\nmassa, nec semper lorem quam in massa.\n\n\n\n\nQualifiers:\n\n\n\n\ntip\n\n\nhint\n\n\nimportant\n\n\n\n\nSuccess\n\n\nExample:\n\n\n1\n2\n3\n4\n!!! success\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\n    nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\n    massa, nec semper lorem quam in massa.\n\n\n\n\n\n\nResult:\n\n\n\n\nSuccess\n\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\nnulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\nmassa, nec semper lorem quam in massa.\n\n\n\n\nQualifiers:\n\n\n\n\nsuccess\n\n\ncheck\n\n\ndone\n\n\n\n\nQuestion\n\n\nExample:\n\n\n1\n2\n3\n4\n!!! question\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\n    nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\n    massa, nec semper lorem quam in massa.\n\n\n\n\n\n\nResult:\n\n\n\n\nQuestion\n\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\nnulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\nmassa, nec semper lorem quam in massa.\n\n\n\n\nQualifiers:\n\n\n\n\nquestion\n\n\nhelp\n\n\nfaq\n\n\n\n\nWarning\n\n\nExample:\n\n\n1\n2\n3\n4\n!!! warning\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\n    nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\n    massa, nec semper lorem quam in massa.\n\n\n\n\n\n\nResult:\n\n\n\n\nWarning\n\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\nnulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\nmassa, nec semper lorem quam in massa.\n\n\n\n\nQualifiers:\n\n\n\n\nwarning\n\n\ncaution\n\n\nattention\n\n\n\n\nFailure\n\n\nExample:\n\n\n1\n2\n3\n4\n!!! failure\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\n    nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\n    massa, nec semper lorem quam in massa.\n\n\n\n\n\n\nResult:\n\n\n\n\nFailure\n\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\nnulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\nmassa, nec semper lorem quam in massa.\n\n\n\n\nQualifiers:\n\n\n\n\nfailure\n\n\nfail\n\n\nmissing\n\n\n\n\nDanger\n\n\nExample:\n\n\n1\n2\n3\n4\n!!! danger\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\n    nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\n    massa, nec semper lorem quam in massa.\n\n\n\n\n\n\nResult:\n\n\n\n\nDanger\n\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\nnulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\nmassa, nec semper lorem quam in massa.\n\n\n\n\nQualifiers:\n\n\n\n\ndanger\n\n\nerror\n\n\n\n\nBug\n\n\nExample:\n\n\n1\n2\n3\n4\n!!! bug\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\n    nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\n    massa, nec semper lorem quam in massa.\n\n\n\n\n\n\nResult:\n\n\n\n\nBug\n\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\nnulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\nmassa, nec semper lorem quam in massa.\n\n\n\n\nQualifiers:\n\n\n\n\nbug\n\n\n\n\nExample\n\n\nExample:\n\n\n1\n2\n3\n4\n!!! example\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\n    nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\n    massa, nec semper lorem quam in massa.\n\n\n\n\n\n\nResult:\n\n\n\n\nExample\n\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\nnulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\nmassa, nec semper lorem quam in massa.\n\n\n\n\nQualifiers:\n\n\n\n\nexample\n\n\nsnippet\n\n\n\n\nQuote\n\n\nExample:\n\n\n1\n2\n3\n4\n!!! quote\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\n    nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\n    massa, nec semper lorem quam in massa.\n\n\n\n\n\n\nResult:\n\n\n\n\nQuote\n\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\nnulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\nmassa, nec semper lorem quam in massa.\n\n\n\n\nQualifiers:\n\n\n\n\nquote\n\n\ncite",
            "title": "Block Style"
        },
        {
            "location": "/help/block-style/index.html#block-styled-content",
            "text": "",
            "title": "Block-styled content"
        },
        {
            "location": "/help/block-style/index.html#usage",
            "text": "Blocks follow a simple syntax: every block is started with  !!! ,\nfollowed by a single keyword which is used as the  type qualifier  of the\nblock. The content of the block then follows on the next line, indented by\nfour spaces.  Example:  1\n2\n3\n4 !!! note\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\n    nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\n    massa, nec semper lorem quam in massa.   Result:   Note  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\nnulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\nmassa, nec semper lorem quam in massa.",
            "title": "Usage"
        },
        {
            "location": "/help/block-style/index.html#changing-the-title",
            "text": "By default, the block title will equal the type qualifier in titlecase. However,\nit can easily be changed by adding a quoted string after the type qualifier.  Example:  1\n2\n3\n4 !!! note \"Phasellus posuere in sem ut cursus\"\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\n    nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\n    massa, nec semper lorem quam in massa.   Result:   Phasellus posuere in sem ut cursus  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\nnulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\nmassa, nec semper lorem quam in massa.",
            "title": "Changing the title"
        },
        {
            "location": "/help/block-style/index.html#removing-the-title",
            "text": "Similar to setting a  custom title , the icon and title can be omitted by\nproviding an empty string after the type qualifier:  Example:  1\n2\n3\n4 !!! note \"\"\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\n    nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\n    massa, nec semper lorem quam in massa.   Result:   Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\nnulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\nmassa, nec semper lorem quam in massa.",
            "title": "Removing the title"
        },
        {
            "location": "/help/block-style/index.html#embedded-code-blocks",
            "text": "Blocks can contain all kinds of text content, including headlines, lists,\nparagraphs and other blocks \u2013 except code blocks, because the parser from the\nstandard Markdown library does not account for those.  However, the  PyMdown Extensions  package adds an extension called SuperFences , which makes it possible to nest code blocks within other\nblocks.  Example:   Note  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\nnulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\nmassa, nec semper lorem quam in massa.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13 SELECT \n   Employees . EmployeeID , \n   Employees . Name , \n   Employees . Salary , \n   Manager . Name   AS   Manager  FROM \n   Employees  LEFT   JOIN \n   Employees   AS   Manager  ON \n   Employees . ManagerID   =   Manager . EmployeeID  WHERE \n   Employees . EmployeeID   =   '087652' ;    Nunc eu odio eleifend, blandit leo a, volutpat sapien. Phasellus posuere in\nsem ut cursus. Nullam sit amet tincidunt ipsum, sit amet elementum turpis.\nEtiam ipsum quam, mattis in purus vitae, lacinia fermentum enim.",
            "title": "Embedded code blocks"
        },
        {
            "location": "/help/block-style/index.html#collapsible-blocks",
            "text": "The  Details  extension which is also part of the  PyMdown Extensions \npackage adds support for rendering collapsible blocks. This is\nuseful for FAQs or content that is of secondary nature.  Example:  1\n2\n3\n4 ??? note \"Phasellus posuere in sem ut cursus\"\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\n    nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\n    massa, nec semper lorem quam in massa.   Result:  Phasellus posuere in sem ut cursus Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\nnulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\nmassa, nec semper lorem quam in massa. By adding a  +  sign directly after the start marker, blocks can be rendered\nopen by default.",
            "title": "Collapsible blocks"
        },
        {
            "location": "/help/block-style/index.html#types",
            "text": "Supports user-defined type qualifiers which may influence the style\nof the inserted block. Following is a list of type qualifiers provided by the\nMaterial theme, whereas the default type, and thus fallback for unknown type\nqualifiers, is  note .",
            "title": "Types"
        },
        {
            "location": "/help/block-style/index.html#note",
            "text": "Example:  1\n2\n3\n4 !!! note\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\n    nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\n    massa, nec semper lorem quam in massa.   Result:   Note  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\nnulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\nmassa, nec semper lorem quam in massa.   Qualifiers:   note  seealso",
            "title": "Note"
        },
        {
            "location": "/help/block-style/index.html#abstract",
            "text": "Example:  1\n2\n3\n4 !!! abstract\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\n    nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\n    massa, nec semper lorem quam in massa.   Result:   Abstract  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\nnulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\nmassa, nec semper lorem quam in massa.   Qualifiers:   abstract  summary  tldr",
            "title": "Abstract"
        },
        {
            "location": "/help/block-style/index.html#info",
            "text": "Example:  1\n2\n3\n4 !!! info\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\n    nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\n    massa, nec semper lorem quam in massa.   Result:   Info  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\nnulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\nmassa, nec semper lorem quam in massa.   Qualifiers:   info  todo",
            "title": "Info"
        },
        {
            "location": "/help/block-style/index.html#tip",
            "text": "Example:  1\n2\n3\n4 !!! tip\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\n    nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\n    massa, nec semper lorem quam in massa.   Result:   Tip  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\nnulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\nmassa, nec semper lorem quam in massa.   Qualifiers:   tip  hint  important",
            "title": "Tip"
        },
        {
            "location": "/help/block-style/index.html#success",
            "text": "Example:  1\n2\n3\n4 !!! success\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\n    nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\n    massa, nec semper lorem quam in massa.   Result:   Success  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\nnulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\nmassa, nec semper lorem quam in massa.   Qualifiers:   success  check  done",
            "title": "Success"
        },
        {
            "location": "/help/block-style/index.html#question",
            "text": "Example:  1\n2\n3\n4 !!! question\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\n    nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\n    massa, nec semper lorem quam in massa.   Result:   Question  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\nnulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\nmassa, nec semper lorem quam in massa.   Qualifiers:   question  help  faq",
            "title": "Question"
        },
        {
            "location": "/help/block-style/index.html#warning",
            "text": "Example:  1\n2\n3\n4 !!! warning\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\n    nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\n    massa, nec semper lorem quam in massa.   Result:   Warning  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\nnulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\nmassa, nec semper lorem quam in massa.   Qualifiers:   warning  caution  attention",
            "title": "Warning"
        },
        {
            "location": "/help/block-style/index.html#failure",
            "text": "Example:  1\n2\n3\n4 !!! failure\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\n    nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\n    massa, nec semper lorem quam in massa.   Result:   Failure  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\nnulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\nmassa, nec semper lorem quam in massa.   Qualifiers:   failure  fail  missing",
            "title": "Failure"
        },
        {
            "location": "/help/block-style/index.html#danger",
            "text": "Example:  1\n2\n3\n4 !!! danger\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\n    nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\n    massa, nec semper lorem quam in massa.   Result:   Danger  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\nnulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\nmassa, nec semper lorem quam in massa.   Qualifiers:   danger  error",
            "title": "Danger"
        },
        {
            "location": "/help/block-style/index.html#bug",
            "text": "Example:  1\n2\n3\n4 !!! bug\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\n    nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\n    massa, nec semper lorem quam in massa.   Result:   Bug  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\nnulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\nmassa, nec semper lorem quam in massa.   Qualifiers:   bug",
            "title": "Bug"
        },
        {
            "location": "/help/block-style/index.html#example",
            "text": "Example:  1\n2\n3\n4 !!! example\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\n    nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\n    massa, nec semper lorem quam in massa.   Result:   Example  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\nnulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\nmassa, nec semper lorem quam in massa.   Qualifiers:   example  snippet",
            "title": "Example"
        },
        {
            "location": "/help/block-style/index.html#quote",
            "text": "Example:  1\n2\n3\n4 !!! quote\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\n    nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\n    massa, nec semper lorem quam in massa.   Result:   Quote  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\nnulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\nmassa, nec semper lorem quam in massa.   Qualifiers:   quote  cite",
            "title": "Quote"
        },
        {
            "location": "/help/code-highlight/index.html",
            "text": "Code Highlight\n\n\nUsage\n\n\nSpecifying the language\n\n\nThis uses the same syntax as regular Markdown code blocks,\nbut needs to know the language of the code block. This can be done in three\ndifferent ways.\n\n\nvia Markdown syntax \nrecommended\n\n\nIn Markdown, code blocks can be opened and closed by writing three backticks on\nseparate lines. To add code highlighting to those blocks, the easiest way is\nto specify the language directly after the opening block.\n\n\nExample:\n\n\n1\n2\n3\n``\n`\n \npython\n\n\nimport\n \ntensorflow\n \nas\n \ntf\n\n\n``\n`\n\n\n\n\n\n\n\nResult:\n\n\n1\nimport\n \ntensorflow\n \nas\n \ntf\n\n\n\n\n\n\n\nvia Shebang\n\n\nAlternatively, if the first line of a code block contains a shebang, the\nlanguage is derived from the path referenced in the shebang. This will only\nwork for code blocks that are indented using four spaces, not for those\nencapsulated in three backticks.\n\n\nExample:\n\n\n1\n2\n#!/usr/bin/python\n\n\nimport\n \ntensorflow\n \nas\n \ntf\n\n\n\n\n\n\n\nResult:\n\n\n1\n2\n#!/usr/bin/python\n\n\nimport\n \ntensorflow\n \nas\n \ntf\n\n\n\n\n\n\n\nvia three colons\n\n\nIf the first line starts with three colons followed by a language identifier,\nthe first line is stripped. This will only work for code blocks that are\nindented using four spaces, not for those encapsulated in three backticks.\n\n\nExample:\n\n\n1\n2\n:::\npython\n\n\nimport\n \ntensorflow\n \nas\n \ntf\n\n\n\n\n\n\n\nResult:\n\n\n1\nimport\n \ntensorflow\n \nas\n \ntf\n\n\n\n\n\n\n\nAdding line numbers\n\n\nExample:\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n``` python\n\"\"\" Bubble sort \"\"\"\ndef bubble_sort(items):\n    for i in range(len(items)):\n        for j in range(len(items) - 1 - i):\n            if items[j] > items[j + 1]:\n                items[j], items[j + 1] = items[j + 1], items[j]\n```\n\n\n\n\n\n\nResult:\n\n\n1\n2\n3\n4\n5\n6\n\"\"\" Bubble sort \"\"\"\n\n\ndef\n \nbubble_sort\n(\nitems\n):\n\n    \nfor\n \ni\n \nin\n \nrange\n(\nlen\n(\nitems\n)):\n\n        \nfor\n \nj\n \nin\n \nrange\n(\nlen\n(\nitems\n)\n \n-\n \n1\n \n-\n \ni\n):\n\n            \nif\n \nitems\n[\nj\n]\n \n>\n \nitems\n[\nj\n \n+\n \n1\n]:\n\n                \nitems\n[\nj\n],\n \nitems\n[\nj\n \n+\n \n1\n]\n \n=\n \nitems\n[\nj\n \n+\n \n1\n],\n \nitems\n[\nj\n]\n\n\n\n\n\n\n\nHighlighting specific lines\n\n\nSpecific lines can be highlighted by passing the line numbers to the \nhl_lines\n\nargument placed right after the language identifier. Line counts start at 1.\n\n\nExample:\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n``` python hl_lines=\"3 4\"\n\"\"\" Bubble sort \"\"\"\ndef bubble_sort(items):\n    for i in range(len(items)):\n        for j in range(len(items) - 1 - i):\n            if items[j] > items[j + 1]:\n                items[j], items[j + 1] = items[j + 1], items[j]\n```\n\n\n\n\n\n\nResult:\n\n\n1\n2\n3\n4\n5\n6\n\"\"\" Bubble sort \"\"\"\n\n\ndef\n \nbubble_sort\n(\nitems\n):\n\n\n    \nfor\n \ni\n \nin\n \nrange\n(\nlen\n(\nitems\n)):\n\n\n        \nfor\n \nj\n \nin\n \nrange\n(\nlen\n(\nitems\n)\n \n-\n \n1\n \n-\n \ni\n):\n\n\n            \nif\n \nitems\n[\nj\n]\n \n>\n \nitems\n[\nj\n \n+\n \n1\n]:\n\n                \nitems\n[\nj\n],\n \nitems\n[\nj\n \n+\n \n1\n]\n \n=\n \nitems\n[\nj\n \n+\n \n1\n],\n \nitems\n[\nj\n]\n\n\n\n\n\n\n\nSupported languages \nexcerpt\n\n\nCodeHilite uses [Pygments][2], a generic syntax highlighter with support for\nover [300 languages][3], so the following list of examples is just an excerpt.\n\n\nDiff\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\nIndex: grunt.js\n\n\n===================================================================\n\n\n--- grunt.js    (revision 31200)\n\n\n+++ grunt.js    (working copy)\n\n\n@@ -12,6 +12,7 @@\n\n\n module.exports = function (grunt) {\n\n\n+  console.log('hello world');\n\n   // Project configuration.\n   grunt.initConfig({\n     lint: {\n\n@@ -19,10 +20,6 @@\n\n         'packages/services.web/{!(test)/**/,}*.js',\n         'packages/error/**/*.js'\n       ],\n\n-      scripts: [\n\n\n-        'grunt.js',\n\n\n-        'db/**/*.js'\n\n\n-      ],\n\n       browser: [\n         'packages/web/server.js',\n         'packages/web/server/**/*.js',\n\n\n\n\n\n\nDocker\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\nFROM\n ubuntu\n\n\n\n# Install vnc, xvfb in order to create a 'fake' display and firefox\n\n\nRUN\n apt-get update \n&&\n apt-get install -y x11vnc xvfb firefox\n\nRUN\n mkdir ~/.vnc\n\n\n# Setup a password\n\n\nRUN\n x11vnc -storepasswd \n1234\n ~/.vnc/passwd\n\n\n# Autostart firefox (might not be the best way, but it does the trick)\n\n\nRUN\n bash -c \n'echo \"firefox\" >> /.bashrc'\n\n\n\nEXPOSE\n 5900\n\n\nCMD\n [\"x11vnc\", \"-forever\", \"-usepw\", \"-create\"]\n\n\n\n\n\n\n\nHTML\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n<!doctype html>\n\n\n<\nhtml\n \nclass\n=\n\"no-js\"\n \nlang\n=\n\"\"\n>\n\n  \n<\nhead\n>\n\n    \n<\nmeta\n \ncharset\n=\n\"utf-8\"\n>\n\n    \n<\nmeta\n \nhttp-equiv\n=\n\"x-ua-compatible\"\n \ncontent\n=\n\"ie=edge\"\n>\n\n    \n<\ntitle\n>\nHTML5 Boilerplate\n</\ntitle\n>\n\n    \n<\nmeta\n \nname\n=\n\"description\"\n \ncontent\n=\n\"\"\n>\n\n    \n<\nmeta\n \nname\n=\n\"viewport\"\n \ncontent\n=\n\"width=device-width, initial-scale=1\"\n>\n\n\n    \n<\nlink\n \nrel\n=\n\"apple-touch-icon\"\n \nhref\n=\n\"apple-touch-icon.png\"\n>\n\n    \n<\nlink\n \nrel\n=\n\"stylesheet\"\n \nhref\n=\n\"css/normalize.css\"\n>\n\n    \n<\nlink\n \nrel\n=\n\"stylesheet\"\n \nhref\n=\n\"css/main.css\"\n>\n\n    \n<\nscript\n \nsrc\n=\n\"js/vendor/modernizr-2.8.3.min.js\"\n></\nscript\n>\n\n  \n</\nhead\n>\n\n  \n<\nbody\n>\n\n    \n<\np\n>\nHello world! This is HTML5 Boilerplate.\n</\np\n>\n\n  \n</\nbody\n>\n\n\n</\nhtml\n>\n\n\n\n\n\n\n\nJava\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\nimport\n \njava.util.LinkedList\n;\n\n\nimport\n \njava.lang.reflect.Array\n;\n\n\n\npublic\n \nclass\n \nUnsortedHashSet\n<\nE\n>\n \n{\n\n\n  \nprivate\n \nstatic\n \nfinal\n \ndouble\n \nLOAD_FACTOR_LIMIT\n \n=\n \n0.7\n;\n\n\n  \nprivate\n \nint\n \nsize\n;\n\n  \nprivate\n \nLinkedList\n<\nE\n>[]\n \ncon\n;\n\n\n  \npublic\n \nUnsortedHashSet\n()\n \n{\n\n    \ncon\n  \n=\n \n(\nLinkedList\n<\nE\n>[])(\nnew\n \nLinkedList\n[\n10\n]);\n\n  \n}\n\n\n  \npublic\n \nboolean\n \nadd\n(\nE\n \nobj\n)\n \n{\n\n    \nint\n \noldSize\n \n=\n \nsize\n;\n\n    \nint\n \nindex\n \n=\n \nMath\n.\nabs\n(\nobj\n.\nhashCode\n())\n \n%\n \ncon\n.\nlength\n;\n\n    \nif\n \n(\ncon\n[\nindex\n]\n \n==\n \nnull\n)\n\n      \ncon\n[\nindex\n]\n \n=\n \nnew\n \nLinkedList\n<\nE\n>();\n\n    \nif\n \n(!\ncon\n[\nindex\n].\ncontains\n(\nobj\n))\n \n{\n\n      \ncon\n[\nindex\n].\nadd\n(\nobj\n);\n\n      \nsize\n++;\n\n    \n}\n\n    \nif\n \n(\n1.0\n \n*\n \nsize\n \n/\n \ncon\n.\nlength\n \n>\n \nLOAD_FACTOR_LIMIT\n)\n\n      \nresize\n();\n\n    \nreturn\n \noldSize\n \n!=\n \nsize\n;\n\n  \n}\n\n\n  \nprivate\n \nvoid\n \nresize\n()\n \n{\n\n    \nUnsortedHashSet\n<\nE\n>\n \ntemp\n \n=\n \nnew\n \nUnsortedHashSet\n<\nE\n>();\n\n    \ntemp\n.\ncon\n \n=\n \n(\nLinkedList\n<\nE\n>[])(\nnew\n \nLinkedList\n[\ncon\n.\nlength\n \n*\n \n2\n \n+\n \n1\n]);\n\n    \nfor\n \n(\nint\n \ni\n \n=\n \n0\n;\n \ni\n \n<\n \ncon\n.\nlength\n;\n \ni\n++)\n \n{\n\n      \nif\n \n(\ncon\n[\ni\n]\n \n!=\n \nnull\n)\n\n        \nfor\n \n(\nE\n \ne\n \n:\n \ncon\n[\ni\n])\n\n          \ntemp\n.\nadd\n(\ne\n);\n\n    \n}\n\n    \ncon\n \n=\n \ntemp\n.\ncon\n;\n\n  \n}\n\n\n  \npublic\n \nint\n \nsize\n()\n \n{\n\n    \nreturn\n \nsize\n;\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\nJavaScript\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\nvar\n \nMath\n \n=\n \nrequire\n(\n'lib/math'\n);\n\n\n\nvar\n \n_extends\n \n=\n \nfunction\n \n(\ntarget\n)\n \n{\n\n  \nfor\n \n(\nvar\n \ni\n \n=\n \n1\n;\n \ni\n \n<\n \narguments\n.\nlength\n;\n \ni\n++\n)\n \n{\n\n    \nvar\n \nsource\n \n=\n \narguments\n[\ni\n];\n\n    \nfor\n \n(\nvar\n \nkey\n \nin\n \nsource\n)\n \n{\n\n      \ntarget\n[\nkey\n]\n \n=\n \nsource\n[\nkey\n];\n\n    \n}\n\n  \n}\n\n\n  \nreturn\n \ntarget\n;\n\n\n};\n\n\n\nvar\n \ne\n \n=\n \nexports\n.\ne\n \n=\n \n2.71828182846\n;\n\n\nexports\n[\n'default'\n]\n \n=\n \nfunction\n \n(\nx\n)\n \n{\n\n  \nreturn\n \nMath\n.\nexp\n(\nx\n);\n\n\n};\n\n\n\nmodule\n.\nexports\n \n=\n \n_extends\n(\nexports\n[\n'default'\n],\n \nexports\n);\n\n\n\n\n\n\n\nJSON\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n{\n\n  \n\"name\"\n:\n \n\"mkdocs-material\"\n,\n\n  \n\"version\"\n:\n \n\"0.2.4\"\n,\n\n  \n\"description\"\n:\n \n\"A Material Design theme for MkDocs\"\n,\n\n  \n\"homepage\"\n:\n \n\"http://squidfunk.github.io/mkdocs-material/\"\n,\n\n  \n\"authors\"\n:\n \n[\n\n    \n\"squidfunk <martin.donath@squidfunk.com>\"\n\n  \n],\n\n  \n\"license\"\n:\n \n\"MIT\"\n,\n\n  \n\"main\"\n:\n \n\"Gulpfile.js\"\n,\n\n  \n\"scripts\"\n:\n \n{\n\n    \n\"start\"\n:\n \n\"./node_modules/.bin/gulp watch --mkdocs\"\n,\n\n    \n\"build\"\n:\n \n\"./node_modules/.bin/gulp build --production\"\n\n  \n}\n\n  \n...\n\n\n}\n\n\n\n\n\n\n\nXML\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n\n<!DOCTYPE mainTag SYSTEM \"some.dtd\" [ENTITY % entity]>\n\n\n<?oxygen RNGSchema=\"some.rng\" type=\"xml\"?>\n\n\n<xs:main-Tag\n \nxmlns:xs=\n\"http://www.w3.org/2001/XMLSchema\"\n>\n\n  \n<!-- This is a sample comment -->\n\n  \n<childTag\n \nattribute=\n\"Quoted Value\"\n \nanother-attribute=\n'Single quoted value'\n\n      \na-third-attribute=\n'123'\n>\n\n    \n<withTextContent>\nSome text content\n</withTextContent>\n\n    \n<withEntityContent>\nSome text content with \n&lt;\nentities\n&gt;\n and\n      mentioning uint8_t and int32_t\n</withEntityContent>\n\n    \n<otherTag\n \nattribute=\n'Single quoted Value'\n/>\n\n  \n</childTag>\n\n  \n<![CDATA[ some CData ]]>\n\n\n</main-Tag>",
            "title": "Code Highlight"
        },
        {
            "location": "/help/code-highlight/index.html#code-highlight",
            "text": "",
            "title": "Code Highlight"
        },
        {
            "location": "/help/code-highlight/index.html#usage",
            "text": "",
            "title": "Usage"
        },
        {
            "location": "/help/code-highlight/index.html#specifying-the-language",
            "text": "This uses the same syntax as regular Markdown code blocks,\nbut needs to know the language of the code block. This can be done in three\ndifferent ways.",
            "title": "Specifying the language"
        },
        {
            "location": "/help/code-highlight/index.html#via-markdown-syntax-recommended",
            "text": "In Markdown, code blocks can be opened and closed by writing three backticks on\nseparate lines. To add code highlighting to those blocks, the easiest way is\nto specify the language directly after the opening block.  Example:  1\n2\n3 `` `   python  import   tensorflow   as   tf  `` `    Result:  1 import   tensorflow   as   tf",
            "title": "via Markdown syntax recommended"
        },
        {
            "location": "/help/code-highlight/index.html#via-shebang",
            "text": "Alternatively, if the first line of a code block contains a shebang, the\nlanguage is derived from the path referenced in the shebang. This will only\nwork for code blocks that are indented using four spaces, not for those\nencapsulated in three backticks.  Example:  1\n2 #!/usr/bin/python  import   tensorflow   as   tf    Result:  1\n2 #!/usr/bin/python  import   tensorflow   as   tf",
            "title": "via Shebang"
        },
        {
            "location": "/help/code-highlight/index.html#via-three-colons",
            "text": "If the first line starts with three colons followed by a language identifier,\nthe first line is stripped. This will only work for code blocks that are\nindented using four spaces, not for those encapsulated in three backticks.  Example:  1\n2 ::: python  import   tensorflow   as   tf    Result:  1 import   tensorflow   as   tf",
            "title": "via three colons"
        },
        {
            "location": "/help/code-highlight/index.html#adding-line-numbers",
            "text": "Example:  1\n2\n3\n4\n5\n6\n7\n8 ``` python\n\"\"\" Bubble sort \"\"\"\ndef bubble_sort(items):\n    for i in range(len(items)):\n        for j in range(len(items) - 1 - i):\n            if items[j] > items[j + 1]:\n                items[j], items[j + 1] = items[j + 1], items[j]\n```   Result:  1\n2\n3\n4\n5\n6 \"\"\" Bubble sort \"\"\"  def   bubble_sort ( items ): \n     for   i   in   range ( len ( items )): \n         for   j   in   range ( len ( items )   -   1   -   i ): \n             if   items [ j ]   >   items [ j   +   1 ]: \n                 items [ j ],   items [ j   +   1 ]   =   items [ j   +   1 ],   items [ j ]",
            "title": "Adding line numbers"
        },
        {
            "location": "/help/code-highlight/index.html#highlighting-specific-lines",
            "text": "Specific lines can be highlighted by passing the line numbers to the  hl_lines \nargument placed right after the language identifier. Line counts start at 1.  Example:  1\n2\n3\n4\n5\n6\n7\n8 ``` python hl_lines=\"3 4\"\n\"\"\" Bubble sort \"\"\"\ndef bubble_sort(items):\n    for i in range(len(items)):\n        for j in range(len(items) - 1 - i):\n            if items[j] > items[j + 1]:\n                items[j], items[j + 1] = items[j + 1], items[j]\n```   Result:  1\n2\n3\n4\n5\n6 \"\"\" Bubble sort \"\"\"  def   bubble_sort ( items ):       for   i   in   range ( len ( items )):           for   j   in   range ( len ( items )   -   1   -   i ):               if   items [ j ]   >   items [ j   +   1 ]: \n                 items [ j ],   items [ j   +   1 ]   =   items [ j   +   1 ],   items [ j ]",
            "title": "Highlighting specific lines"
        },
        {
            "location": "/help/code-highlight/index.html#supported-languages-excerpt",
            "text": "CodeHilite uses [Pygments][2], a generic syntax highlighter with support for\nover [300 languages][3], so the following list of examples is just an excerpt.",
            "title": "Supported languages excerpt"
        },
        {
            "location": "/help/code-highlight/index.html#diff",
            "text": "1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23 Index: grunt.js  ===================================================================  --- grunt.js    (revision 31200)  +++ grunt.js    (working copy)  @@ -12,6 +12,7 @@ \n\n module.exports = function (grunt) { +  console.log('hello world'); \n   // Project configuration.\n   grunt.initConfig({\n     lint: { @@ -19,10 +20,6 @@ \n         'packages/services.web/{!(test)/**/,}*.js',\n         'packages/error/**/*.js'\n       ], -      scripts: [  -        'grunt.js',  -        'db/**/*.js'  -      ], \n       browser: [\n         'packages/web/server.js',\n         'packages/web/server/**/*.js',",
            "title": "Diff"
        },
        {
            "location": "/help/code-highlight/index.html#docker",
            "text": "1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14 FROM  ubuntu  # Install vnc, xvfb in order to create a 'fake' display and firefox  RUN  apt-get update  &&  apt-get install -y x11vnc xvfb firefox RUN  mkdir ~/.vnc # Setup a password  RUN  x11vnc -storepasswd  1234  ~/.vnc/passwd # Autostart firefox (might not be the best way, but it does the trick)  RUN  bash -c  'echo \"firefox\" >> /.bashrc'  EXPOSE  5900  CMD  [\"x11vnc\", \"-forever\", \"-usepw\", \"-create\"]",
            "title": "Docker"
        },
        {
            "location": "/help/code-highlight/index.html#html",
            "text": "1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18 <!doctype html>  < html   class = \"no-js\"   lang = \"\" > \n   < head > \n     < meta   charset = \"utf-8\" > \n     < meta   http-equiv = \"x-ua-compatible\"   content = \"ie=edge\" > \n     < title > HTML5 Boilerplate </ title > \n     < meta   name = \"description\"   content = \"\" > \n     < meta   name = \"viewport\"   content = \"width=device-width, initial-scale=1\" > \n\n     < link   rel = \"apple-touch-icon\"   href = \"apple-touch-icon.png\" > \n     < link   rel = \"stylesheet\"   href = \"css/normalize.css\" > \n     < link   rel = \"stylesheet\"   href = \"css/main.css\" > \n     < script   src = \"js/vendor/modernizr-2.8.3.min.js\" ></ script > \n   </ head > \n   < body > \n     < p > Hello world! This is HTML5 Boilerplate. </ p > \n   </ body >  </ html >",
            "title": "HTML"
        },
        {
            "location": "/help/code-highlight/index.html#java",
            "text": "1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43 import   java.util.LinkedList ;  import   java.lang.reflect.Array ;  public   class   UnsortedHashSet < E >   { \n\n   private   static   final   double   LOAD_FACTOR_LIMIT   =   0.7 ; \n\n   private   int   size ; \n   private   LinkedList < E >[]   con ; \n\n   public   UnsortedHashSet ()   { \n     con    =   ( LinkedList < E >[])( new   LinkedList [ 10 ]); \n   } \n\n   public   boolean   add ( E   obj )   { \n     int   oldSize   =   size ; \n     int   index   =   Math . abs ( obj . hashCode ())   %   con . length ; \n     if   ( con [ index ]   ==   null ) \n       con [ index ]   =   new   LinkedList < E >(); \n     if   (! con [ index ]. contains ( obj ))   { \n       con [ index ]. add ( obj ); \n       size ++; \n     } \n     if   ( 1.0   *   size   /   con . length   >   LOAD_FACTOR_LIMIT ) \n       resize (); \n     return   oldSize   !=   size ; \n   } \n\n   private   void   resize ()   { \n     UnsortedHashSet < E >   temp   =   new   UnsortedHashSet < E >(); \n     temp . con   =   ( LinkedList < E >[])( new   LinkedList [ con . length   *   2   +   1 ]); \n     for   ( int   i   =   0 ;   i   <   con . length ;   i ++)   { \n       if   ( con [ i ]   !=   null ) \n         for   ( E   e   :   con [ i ]) \n           temp . add ( e ); \n     } \n     con   =   temp . con ; \n   } \n\n   public   int   size ()   { \n     return   size ; \n   }  }",
            "title": "Java"
        },
        {
            "location": "/help/code-highlight/index.html#javascript",
            "text": "1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19 var   Math   =   require ( 'lib/math' );  var   _extends   =   function   ( target )   { \n   for   ( var   i   =   1 ;   i   <   arguments . length ;   i ++ )   { \n     var   source   =   arguments [ i ]; \n     for   ( var   key   in   source )   { \n       target [ key ]   =   source [ key ]; \n     } \n   } \n\n   return   target ;  };  var   e   =   exports . e   =   2.71828182846 ;  exports [ 'default' ]   =   function   ( x )   { \n   return   Math . exp ( x );  };  module . exports   =   _extends ( exports [ 'default' ],   exports );",
            "title": "JavaScript"
        },
        {
            "location": "/help/code-highlight/index.html#json",
            "text": "1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16 { \n   \"name\" :   \"mkdocs-material\" , \n   \"version\" :   \"0.2.4\" , \n   \"description\" :   \"A Material Design theme for MkDocs\" , \n   \"homepage\" :   \"http://squidfunk.github.io/mkdocs-material/\" , \n   \"authors\" :   [ \n     \"squidfunk <martin.donath@squidfunk.com>\" \n   ], \n   \"license\" :   \"MIT\" , \n   \"main\" :   \"Gulpfile.js\" , \n   \"scripts\" :   { \n     \"start\" :   \"./node_modules/.bin/gulp watch --mkdocs\" , \n     \"build\" :   \"./node_modules/.bin/gulp build --production\" \n   } \n   ...  }",
            "title": "JSON"
        },
        {
            "location": "/help/code-highlight/index.html#xml",
            "text": "1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14 <?xml version=\"1.0\" encoding=\"UTF-8\"?>  <!DOCTYPE mainTag SYSTEM \"some.dtd\" [ENTITY % entity]>  <?oxygen RNGSchema=\"some.rng\" type=\"xml\"?>  <xs:main-Tag   xmlns:xs= \"http://www.w3.org/2001/XMLSchema\" > \n   <!-- This is a sample comment --> \n   <childTag   attribute= \"Quoted Value\"   another-attribute= 'Single quoted value' \n       a-third-attribute= '123' > \n     <withTextContent> Some text content </withTextContent> \n     <withEntityContent> Some text content with  &lt; entities &gt;  and\n      mentioning uint8_t and int32_t </withEntityContent> \n     <otherTag   attribute= 'Single quoted Value' /> \n   </childTag> \n   <![CDATA[ some CData ]]>  </main-Tag>",
            "title": "XML"
        },
        {
            "location": "/help/footnotes/index.html",
            "text": "Footnotes\n\n\nUsage\n\n\nThe markup for footnotes is similar to the standard Markdown markup for links.\nA reference is inserted in the text, which can then be defined at any point in\nthe document.\n\n\nInserting the reference\n\n\nThe footnote reference is enclosed in square brackets and starts with a caret,\nfollowed by an arbitrary label which may contain numeric identifiers [1, 2, 3,\n...] or names [Granovetter et al. 1998]. The rendered references are always\nconsecutive superscripted numbers.\n\n\nExample:\n\n\n1\nLorem ipsum[^1] dolor sit amet, consectetur adipiscing elit.[^2]\n\n\n\n\n\n\nResult:\n\n\nLorem ipsum\n1\n dolor sit amet, consectetur adipiscing elit.\n2\n\n\nInserting the content\n\n\nThe footnote content is also declared with a label, which must match the label\nused for the footnote reference. It can be inserted at an arbitrary position in\nthe document and is always rendered at the bottom of the page. Furthermore, a\nbacklink is automatically added to the footnote reference.\n\n\non a single line\n\n\nShort statements can be written on the same line.\n\n\nExample:\n\n\n1\n[^1]: Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n\n\n\n\n\n\nResult:\n\n\nJump to footnote at the bottom of the page\n\n\non multiple lines\n\n\nParagraphs should be written on the next line. As with all Markdown blocks, the\ncontent must be indented by four spaces.\n\n\nExample:\n\n\n1\n2\n3\n4\n[^2]:\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\n    nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\n    massa, nec semper lorem quam in massa.\n\n\n\n\n\n\nResult:\n\n\nJump to footnote at the bottom of the page\n\n\n\n\n\n\n\n\n\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit.\u00a0\n\u21a9\n\n\n\n\n\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\n  nulla. Curabitur feugiat, tortor non consequat finibus, justo purus\n  auctor massa, nec semper lorem quam in massa.\u00a0\n\u21a9",
            "title": "Footnotes"
        },
        {
            "location": "/help/footnotes/index.html#footnotes",
            "text": "",
            "title": "Footnotes"
        },
        {
            "location": "/help/footnotes/index.html#usage",
            "text": "The markup for footnotes is similar to the standard Markdown markup for links.\nA reference is inserted in the text, which can then be defined at any point in\nthe document.",
            "title": "Usage"
        },
        {
            "location": "/help/footnotes/index.html#inserting-the-reference",
            "text": "The footnote reference is enclosed in square brackets and starts with a caret,\nfollowed by an arbitrary label which may contain numeric identifiers [1, 2, 3,\n...] or names [Granovetter et al. 1998]. The rendered references are always\nconsecutive superscripted numbers.  Example:  1 Lorem ipsum[^1] dolor sit amet, consectetur adipiscing elit.[^2]   Result:  Lorem ipsum 1  dolor sit amet, consectetur adipiscing elit. 2",
            "title": "Inserting the reference"
        },
        {
            "location": "/help/footnotes/index.html#inserting-the-content",
            "text": "The footnote content is also declared with a label, which must match the label\nused for the footnote reference. It can be inserted at an arbitrary position in\nthe document and is always rendered at the bottom of the page. Furthermore, a\nbacklink is automatically added to the footnote reference.",
            "title": "Inserting the content"
        },
        {
            "location": "/help/footnotes/index.html#on-a-single-line",
            "text": "Short statements can be written on the same line.  Example:  1 [^1]: Lorem ipsum dolor sit amet, consectetur adipiscing elit.   Result:  Jump to footnote at the bottom of the page",
            "title": "on a single line"
        },
        {
            "location": "/help/footnotes/index.html#on-multiple-lines",
            "text": "Paragraphs should be written on the next line. As with all Markdown blocks, the\ncontent must be indented by four spaces.  Example:  1\n2\n3\n4 [^2]:\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\n    nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor\n    massa, nec semper lorem quam in massa.   Result:  Jump to footnote at the bottom of the page      Lorem ipsum dolor sit amet, consectetur adipiscing elit.\u00a0 \u21a9    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod\n  nulla. Curabitur feugiat, tortor non consequat finibus, justo purus\n  auctor massa, nec semper lorem quam in massa.\u00a0 \u21a9",
            "title": "on multiple lines"
        },
        {
            "location": "/help/extensions/index.html",
            "text": "Extensions\n\n\nUsage\n\n\nInline Highlight\n\n\nInline Highlight\n adds support for inline code highlighting. It's useful for\nshort snippets included within body copy, e.g. \nvar\n \ntest\n \n=\n \n0\n;\n and can be\nachived by prefixing inline code with a shebang and language identifier,\ne.g. \n#!js\n.\n\n\nMark\n\n\nMark\n adds the ability to \nhighlight text\n like it was marked with a\n\ntext marker\n. The portion of text that should be highlighted must be\nenclosed in two equal signs \n==...==\n.\n\n\nSmartSymbols\n\n\nSmartSymbols\n converts markup for special characters into their\ncorresponding symbols, e.g. arrows (\u2190, \u2192, \u2194), trademark and copyright\nsymbols (\u00a9, \u2122, \u00ae) and fractions (\u00bd, \u00bc, ...).\n\n\nTasklist\n\n\nTasklist\n adds support for styled checkbox lists. This is useful for\nkeeping track of tasks and showing what has been done and has yet to be done.\nCheckbox lists are like regular lists, but prefixed with \n[ ]\n for empty or\n\n[x]\n for filled checkboxes.\n\n\nExample:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n* [x] Lorem ipsum dolor sit amet, consectetur adipiscing elit\n* [x] Nulla lobortis egestas semper\n* [x] Curabitur elit nibh, euismod et ullamcorper at, iaculis feugiat est\n* [ ] Vestibulum convallis sit amet nisi a tincidunt\n    * [x] In hac habitasse platea dictumst\n    * [x] In scelerisque nibh non dolor mollis congue sed et metus\n    * [x] Sed egestas felis quis elit dapibus, ac aliquet turpis mattis\n    * [ ] Praesent sed risus massa\n* [ ] Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque\n* [ ] Nulla vel eros venenatis, imperdiet enim id, faucibus nisi\n\n\n\n\n\n\nResult:\n\n\n\n\n Lorem ipsum dolor sit amet, consectetur adipiscing elit\n\n\n Nulla lobortis egestas semper\n\n\n Curabitur elit nibh, euismod et ullamcorper at, iaculis feugiat est\n\n\n Vestibulum convallis sit amet nisi a tincidunt\n\n\n In hac habitasse platea dictumst\n\n\n In scelerisque nibh non dolor mollis congue sed et metus\n\n\n Sed egestas felis quis elit dapibus, ac aliquet turpis mattis\n\n\n Praesent sed risus massa\n\n\n\n\n\n\n Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque\n\n\n Nulla vel eros venenatis, imperdiet enim id, faucibus nisi\n\n\n\n\nTilde\n\n\nTilde\n provides an easy way to \nstrike through\n cross out text.\nThe portion of text that should be erased must be enclosed in two tildes\n\n~~...~~\n and the extension will take care of the rest.",
            "title": "Extensions"
        },
        {
            "location": "/help/extensions/index.html#extensions",
            "text": "",
            "title": "Extensions"
        },
        {
            "location": "/help/extensions/index.html#usage",
            "text": "",
            "title": "Usage"
        },
        {
            "location": "/help/extensions/index.html#inline-highlight",
            "text": "Inline Highlight  adds support for inline code highlighting. It's useful for\nshort snippets included within body copy, e.g.  var   test   =   0 ;  and can be\nachived by prefixing inline code with a shebang and language identifier,\ne.g.  #!js .",
            "title": "Inline Highlight"
        },
        {
            "location": "/help/extensions/index.html#mark",
            "text": "Mark  adds the ability to  highlight text  like it was marked with a text marker . The portion of text that should be highlighted must be\nenclosed in two equal signs  ==...== .",
            "title": "Mark"
        },
        {
            "location": "/help/extensions/index.html#smartsymbols",
            "text": "SmartSymbols  converts markup for special characters into their\ncorresponding symbols, e.g. arrows (\u2190, \u2192, \u2194), trademark and copyright\nsymbols (\u00a9, \u2122, \u00ae) and fractions (\u00bd, \u00bc, ...).",
            "title": "SmartSymbols"
        },
        {
            "location": "/help/extensions/index.html#tasklist",
            "text": "Tasklist  adds support for styled checkbox lists. This is useful for\nkeeping track of tasks and showing what has been done and has yet to be done.\nCheckbox lists are like regular lists, but prefixed with  [ ]  for empty or [x]  for filled checkboxes.  Example:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10 * [x] Lorem ipsum dolor sit amet, consectetur adipiscing elit\n* [x] Nulla lobortis egestas semper\n* [x] Curabitur elit nibh, euismod et ullamcorper at, iaculis feugiat est\n* [ ] Vestibulum convallis sit amet nisi a tincidunt\n    * [x] In hac habitasse platea dictumst\n    * [x] In scelerisque nibh non dolor mollis congue sed et metus\n    * [x] Sed egestas felis quis elit dapibus, ac aliquet turpis mattis\n    * [ ] Praesent sed risus massa\n* [ ] Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque\n* [ ] Nulla vel eros venenatis, imperdiet enim id, faucibus nisi   Result:    Lorem ipsum dolor sit amet, consectetur adipiscing elit   Nulla lobortis egestas semper   Curabitur elit nibh, euismod et ullamcorper at, iaculis feugiat est   Vestibulum convallis sit amet nisi a tincidunt   In hac habitasse platea dictumst   In scelerisque nibh non dolor mollis congue sed et metus   Sed egestas felis quis elit dapibus, ac aliquet turpis mattis   Praesent sed risus massa     Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque   Nulla vel eros venenatis, imperdiet enim id, faucibus nisi",
            "title": "Tasklist"
        },
        {
            "location": "/help/extensions/index.html#tilde",
            "text": "Tilde  provides an easy way to  strike through  cross out text.\nThe portion of text that should be erased must be enclosed in two tildes ~~...~~  and the extension will take care of the rest.",
            "title": "Tilde"
        }
    ]
}